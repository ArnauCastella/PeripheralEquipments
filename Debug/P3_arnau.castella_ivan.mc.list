
P3_arnau.castella_ivan.mc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08004dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          000007d8  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200007f4  200007f4  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d97c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002347  00000000  00000000  0002d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010f0  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f80  00000000  00000000  00030e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000060b2  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000055b2  00000000  00000000  00037e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d3e4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004884  00000000  00000000  0003d460  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00041ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003bd4 	.word	0x08003bd4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003bd4 	.word	0x08003bd4

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002de:	4313      	orrs	r3, r2
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <ADC_Init+0xa8>)
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000302:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000308:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000310:	4313      	orrs	r3, r2
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4313      	orrs	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800032a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	7d1b      	ldrb	r3, [r3, #20]
 8000330:	3b01      	subs	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	4313      	orrs	r3, r2
 8000338:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800033a:	7afb      	ldrb	r3, [r7, #11]
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	c0fff7fd 	.word	0xc0fff7fd

0800035c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <ADC_CommonInit+0x48>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <ADC_CommonInit+0x4c>)
 8000372:	4013      	ands	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800037e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000384:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800038a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	4313      	orrs	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000392:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <ADC_CommonInit+0x48>)
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	6053      	str	r3, [r2, #4]
}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40012300 	.word	0x40012300
 80003a8:	fffc30e0 	.word	0xfffc30e0

080003ac <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d006      	beq.n	80003cc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003ca:	e005      	b.n	80003d8 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f023 0201 	bic.w	r2, r3, #1
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	609a      	str	r2, [r3, #8]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	4608      	mov	r0, r1
 80003ee:	4611      	mov	r1, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	4603      	mov	r3, r0
 80003f4:	70fb      	strb	r3, [r7, #3]
 80003f6:	460b      	mov	r3, r1
 80003f8:	70bb      	strb	r3, [r7, #2]
 80003fa:	4613      	mov	r3, r2
 80003fc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000406:	78fb      	ldrb	r3, [r7, #3]
 8000408:	2b09      	cmp	r3, #9
 800040a:	d923      	bls.n	8000454 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	f1a3 020a 	sub.w	r2, r3, #10
 8000418:	4613      	mov	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	2207      	movs	r2, #7
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	43db      	mvns	r3, r3
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	4013      	ands	r3, r2
 800042e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000430:	7879      	ldrb	r1, [r7, #1]
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	f1a3 020a 	sub.w	r2, r3, #10
 8000438:	4613      	mov	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	4413      	add	r3, r2
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	4313      	orrs	r3, r2
 800044a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	e01e      	b.n	8000492 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	691b      	ldr	r3, [r3, #16]
 8000458:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800045a:	78fa      	ldrb	r2, [r7, #3]
 800045c:	4613      	mov	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4413      	add	r3, r2
 8000462:	2207      	movs	r2, #7
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	43db      	mvns	r3, r3
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000474:	7879      	ldrb	r1, [r7, #1]
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	4613      	mov	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	4413      	add	r3, r2
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	2b06      	cmp	r3, #6
 8000496:	d821      	bhi.n	80004dc <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800049e:	78bb      	ldrb	r3, [r7, #2]
 80004a0:	1e5a      	subs	r2, r3, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	221f      	movs	r2, #31
 80004aa:	fa02 f303 	lsl.w	r3, r2, r3
 80004ae:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	43db      	mvns	r3, r3
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	4013      	ands	r3, r2
 80004b8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004ba:	78f9      	ldrb	r1, [r7, #3]
 80004bc:	78bb      	ldrb	r3, [r7, #2]
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	4613      	mov	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004da:	e047      	b.n	800056c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80004dc:	78bb      	ldrb	r3, [r7, #2]
 80004de:	2b0c      	cmp	r3, #12
 80004e0:	d821      	bhi.n	8000526 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80004e8:	78bb      	ldrb	r3, [r7, #2]
 80004ea:	1fda      	subs	r2, r3, #7
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	221f      	movs	r2, #31
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	43db      	mvns	r3, r3
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000504:	78f9      	ldrb	r1, [r7, #3]
 8000506:	78bb      	ldrb	r3, [r7, #2]
 8000508:	1fda      	subs	r2, r3, #7
 800050a:	4613      	mov	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	4313      	orrs	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000524:	e022      	b.n	800056c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800052c:	78bb      	ldrb	r3, [r7, #2]
 800052e:	f1a3 020d 	sub.w	r2, r3, #13
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	221f      	movs	r2, #31
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	43db      	mvns	r3, r3
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	4013      	ands	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800054a:	78f9      	ldrb	r1, [r7, #3]
 800054c:	78bb      	ldrb	r3, [r7, #2]
 800054e:	f1a3 020d 	sub.w	r2, r3, #13
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	609a      	str	r2, [r3, #8]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80005b6:	e005      	b.n	80005c4 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80005ee:	e005      	b.n	80005fc <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <DMA_Init+0xac>)
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000632:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800063e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800064a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000650:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000656:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800065c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4313      	orrs	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 0307 	bic.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4313      	orrs	r3, r2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	691a      	ldr	r2, [r3, #16]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	f01c803f 	.word	0xf01c803f

080006b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f043 0201 	orr.w	r2, r3, #1
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80006d6:	e005      	b.n	80006e4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 0201 	bic.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <DMA_GetFlagStatus+0x6c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d802      	bhi.n	8000710 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <DMA_GetFlagStatus+0x70>)
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	e001      	b.n	8000714 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <DMA_GetFlagStatus+0x74>)
 8000712:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e002      	b.n	800072c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000732:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000736:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	4013      	ands	r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000742:	2301      	movs	r3, #1
 8000744:	75fb      	strb	r3, [r7, #23]
 8000746:	e001      	b.n	800074c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800074c:	7dfb      	ldrb	r3, [r7, #23]
}
 800074e:	4618      	mov	r0, r3
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	4002640f 	.word	0x4002640f
 8000760:	40026000 	.word	0x40026000
 8000764:	40026400 	.word	0x40026400

08000768 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <DMA_ClearFlag+0x50>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d802      	bhi.n	8000780 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <DMA_ClearFlag+0x54>)
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e001      	b.n	8000784 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <DMA_ClearFlag+0x58>)
 8000782:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d007      	beq.n	800079e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000794:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800079c:	e006      	b.n	80007ac <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	6093      	str	r3, [r2, #8]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	4002640f 	.word	0x4002640f
 80007bc:	40026000 	.word	0x40026000
 80007c0:	40026400 	.word	0x40026400

080007c4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	4613      	mov	r3, r2
 80007d0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00f      	beq.n	80007fc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	e005      	b.n	80007fc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b80      	cmp	r3, #128	; 0x80
 8000800:	d014      	beq.n	800082c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d008      	beq.n	800081a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f003 031e 	and.w	r3, r3, #30
 8000812:	431a      	orrs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000818:	e008      	b.n	800082c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	f003 031e 	and.w	r3, r3, #30
 8000824:	43db      	mvns	r3, r3
 8000826:	401a      	ands	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <DMA_GetITStatus+0xa4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d802      	bhi.n	800085c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <DMA_GetITStatus+0xa8>)
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	e001      	b.n	8000860 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <DMA_GetITStatus+0xac>)
 800085e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000866:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00a      	beq.n	8000884 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	0adb      	lsrs	r3, r3, #11
 8000872:	f003 031e 	and.w	r3, r3, #30
 8000876:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4013      	ands	r3, r2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	e004      	b.n	800088e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e002      	b.n	80008a6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008ac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <DMA_GetITStatus+0x90>
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80008c2:	2301      	movs	r3, #1
 80008c4:	75fb      	strb	r3, [r7, #23]
 80008c6:	e001      	b.n	80008cc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	4002640f 	.word	0x4002640f
 80008e0:	40026000 	.word	0x40026000
 80008e4:	40026400 	.word	0x40026400

080008e8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <DMA_ClearITPendingBit+0x50>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d802      	bhi.n	8000900 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <DMA_ClearITPendingBit+0x54>)
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e001      	b.n	8000904 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <DMA_ClearITPendingBit+0x58>)
 8000902:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d007      	beq.n	800091e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000914:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 800091c:	e006      	b.n	800092c <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000924:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	6093      	str	r3, [r2, #8]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	4002640f 	.word	0x4002640f
 800093c:	40026000 	.word	0x40026000
 8000940:	40026400 	.word	0x40026400

08000944 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <EXTI_Init+0xe0>)
 8000952:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d04f      	beq.n	80009fc <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800095c:	4931      	ldr	r1, [pc, #196]	; (8000a24 <EXTI_Init+0xe0>)
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <EXTI_Init+0xe0>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	43db      	mvns	r3, r3
 8000968:	4013      	ands	r3, r2
 800096a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800096c:	492d      	ldr	r1, [pc, #180]	; (8000a24 <EXTI_Init+0xe0>)
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <EXTI_Init+0xe0>)
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	43db      	mvns	r3, r3
 8000978:	4013      	ands	r3, r2
 800097a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4413      	add	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	6811      	ldr	r1, [r2, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000996:	4923      	ldr	r1, [pc, #140]	; (8000a24 <EXTI_Init+0xe0>)
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <EXTI_Init+0xe0>)
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4013      	ands	r3, r2
 80009a4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80009a6:	491f      	ldr	r1, [pc, #124]	; (8000a24 <EXTI_Init+0xe0>)
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <EXTI_Init+0xe0>)
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4013      	ands	r3, r2
 80009b4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	795b      	ldrb	r3, [r3, #5]
 80009ba:	2b10      	cmp	r3, #16
 80009bc:	d10e      	bne.n	80009dc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80009be:	4919      	ldr	r1, [pc, #100]	; (8000a24 <EXTI_Init+0xe0>)
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <EXTI_Init+0xe0>)
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80009cc:	4915      	ldr	r1, [pc, #84]	; (8000a24 <EXTI_Init+0xe0>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <EXTI_Init+0xe0>)
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80009da:	e01d      	b.n	8000a18 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <EXTI_Init+0xe0>)
 80009de:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	795b      	ldrb	r3, [r3, #5]
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	e00d      	b.n	8000a18 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	43d2      	mvns	r2, r2
 8000a14:	400a      	ands	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40013c00 	.word	0x40013c00

08000a28 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <EXTI_GetITStatus+0x30>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e001      	b.n	8000a4a <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40013c00 	.word	0x40013c00

08000a5c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI_ClearITPendingBit+0x1c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6153      	str	r3, [r2, #20]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000a9c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8000aa2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8000aa8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8000aae:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8000ab4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8000aba:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000ac0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d106      	bne.n	8000ae0 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8000ad2:	4940      	ldr	r1, [pc, #256]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ade:	e011      	b.n	8000b04 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000ae8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8000af8:	4936      	ldr	r1, [pc, #216]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d130      	bne.n	8000b6e <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b1e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000b2a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8000b36:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000b42:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8000b4e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8000b5e:	491d      	ldr	r1, [pc, #116]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 8000b6c:	e02c      	b.n	8000bc8 <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b80:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000b8c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8000bba:	4906      	ldr	r1, [pc, #24]	; (8000bd4 <FMC_SDRAMInit+0x158>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bc8:	bf00      	nop
 8000bca:	371c      	adds	r7, #28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	a0000140 	.word	0xa0000140

08000bd8 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000bec:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000bf6:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <FMC_SDRAMCmdConfig+0x3c>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6113      	str	r3, [r2, #16]

}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	a0000140 	.word	0xa0000140

08000c18 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8000c20:	4906      	ldr	r1, [pc, #24]	; (8000c3c <FMC_SetRefreshCount+0x24>)
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <FMC_SetRefreshCount+0x24>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	614b      	str	r3, [r1, #20]
   
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	a0000140 	.word	0xa0000140

08000c40 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00a      	beq.n	8000c68 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
  } 
  
}
 8000c66:	e00a      	b.n	8000c7e <FMC_SDRAMWriteProtectionConfig+0x3e>
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 8000c68:	4908      	ldr	r1, [pc, #32]	; (8000c8c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c72:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8000c76:	4013      	ands	r3, r2
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	a0000140 	.word	0xa0000140

08000c90 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b10      	cmp	r3, #16
 8000ca6:	d103      	bne.n	8000cb0 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <FMC_GetFlagStatus+0x6c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	e012      	b.n	8000cd6 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb6:	d103      	bne.n	8000cc0 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <FMC_GetFlagStatus+0x70>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	e00a      	b.n	8000cd6 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc6:	d103      	bne.n	8000cd0 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <FMC_GetFlagStatus+0x74>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	e002      	b.n	8000cd6 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <FMC_GetFlagStatus+0x78>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d002      	beq.n	8000ce8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	a0000060 	.word	0xa0000060
 8000d00:	a0000080 	.word	0xa0000080
 8000d04:	a00000a0 	.word	0xa00000a0
 8000d08:	a0000140 	.word	0xa0000140

08000d0c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e076      	b.n	8000e16 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d165      	bne.n	8000e10 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	401a      	ands	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	4619      	mov	r1, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d003      	beq.n	8000d82 <GPIO_Init+0x76>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d12e      	bne.n	8000de0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	4619      	mov	r1, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4619      	mov	r1, r3
 8000dba:	2301      	movs	r3, #1
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	7992      	ldrb	r2, [r2, #6]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	b292      	uxth	r2, r2
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2103      	movs	r1, #3
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	79db      	ldrb	r3, [r3, #7]
 8000e00:	4619      	mov	r1, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d985      	bls.n	8000d28 <GPIO_Init+0x1c>
    }
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e001      	b.n	8000e4e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	831a      	strh	r2, [r3, #24]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	835a      	strh	r2, [r3, #26]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000eb4:	e002      	b.n	8000ebc <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	887a      	ldrh	r2, [r7, #2]
 8000eba:	835a      	strh	r2, [r3, #26]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	405a      	eors	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f04:	787a      	ldrb	r2, [r7, #1]
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	210f      	movs	r1, #15
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	ea02 0103 	and.w	r1, r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f100 0208 	add.w	r2, r0, #8
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000fa0:	e007      	b.n	8000fb2 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	801a      	strh	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b087      	sub	sp, #28
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	0f1b      	lsrs	r3, r3, #28
 8000fdc:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fe4:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3314      	adds	r3, #20
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e005      	b.n	8001000 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800100c:	2301      	movs	r3, #1
 800100e:	75fb      	strb	r3, [r7, #23]
 8001010:	e001      	b.n	8001016 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001016:	7dfb      	ldrb	r3, [r7, #23]
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001044:	4940      	ldr	r1, [pc, #256]	; (8001148 <LTDC_Init+0x124>)
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <LTDC_Init+0x124>)
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b40      	ldr	r3, [pc, #256]	; (800114c <LTDC_Init+0x128>)
 800104c:	4013      	ands	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8001058:	483b      	ldr	r0, [pc, #236]	; (8001148 <LTDC_Init+0x124>)
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <LTDC_Init+0x124>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6959      	ldr	r1, [r3, #20]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	430b      	orrs	r3, r1
 8001066:	4313      	orrs	r3, r2
 8001068:	6083      	str	r3, [r0, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <LTDC_Init+0x124>)
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <LTDC_Init+0x124>)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <LTDC_Init+0x128>)
 8001072:	4013      	ands	r3, r2
 8001074:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800107e:	4832      	ldr	r0, [pc, #200]	; (8001148 <LTDC_Init+0x124>)
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <LTDC_Init+0x124>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69d9      	ldr	r1, [r3, #28]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	430b      	orrs	r3, r1
 800108c:	4313      	orrs	r3, r2
 800108e:	60c3      	str	r3, [r0, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001090:	492d      	ldr	r1, [pc, #180]	; (8001148 <LTDC_Init+0x124>)
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <LTDC_Init+0x124>)
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <LTDC_Init+0x128>)
 8001098:	4013      	ands	r3, r2
 800109a:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80010a4:	4828      	ldr	r0, [pc, #160]	; (8001148 <LTDC_Init+0x124>)
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <LTDC_Init+0x124>)
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	4313      	orrs	r3, r2
 80010b4:	6103      	str	r3, [r0, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80010b6:	4924      	ldr	r1, [pc, #144]	; (8001148 <LTDC_Init+0x124>)
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <LTDC_Init+0x124>)
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <LTDC_Init+0x128>)
 80010be:	4013      	ands	r3, r2
 80010c0:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80010ca:	481f      	ldr	r0, [pc, #124]	; (8001148 <LTDC_Init+0x124>)
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <LTDC_Init+0x124>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	430b      	orrs	r3, r1
 80010d8:	4313      	orrs	r3, r2
 80010da:	6143      	str	r3, [r0, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80010dc:	491a      	ldr	r1, [pc, #104]	; (8001148 <LTDC_Init+0x124>)
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <LTDC_Init+0x124>)
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <LTDC_Init+0x12c>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <LTDC_Init+0x124>)
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <LTDC_Init+0x124>)
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6819      	ldr	r1, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80010fc:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001104:	4313      	orrs	r3, r2
 8001106:	6183      	str	r3, [r0, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LTDC_Init+0x124>)
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LTDC_Init+0x124>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001122:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <LTDC_Init+0x124>)
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <LTDC_Init+0x124>)
 8001128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4319      	orrs	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	430b      	orrs	r3, r1
 8001136:	4313      	orrs	r3, r2
 8001138:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40016800 	.word	0x40016800
 800114c:	f000f800 	.word	0xf000f800
 8001150:	0ffe888f 	.word	0x0ffe888f

08001154 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <LTDC_Cmd+0x38>)
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <LTDC_Cmd+0x38>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 8001170:	e005      	b.n	800117e <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <LTDC_Cmd+0x38>)
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <LTDC_Cmd+0x38>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40016800 	.word	0x40016800

08001190 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <LTDC_DitherCmd+0x38>)
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <LTDC_DitherCmd+0x38>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 80011ac:	e005      	b.n	80011ba <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <LTDC_DitherCmd+0x38>)
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <LTDC_DitherCmd+0x38>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6193      	str	r3, [r2, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40016800 	.word	0x40016800

080011cc <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <LTDC_ReloadConfig+0x1c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40016800 	.word	0x40016800

080011ec <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f023 0207 	bic.w	r2, r3, #7
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	061b      	lsls	r3, r3, #24
 8001278:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	431a      	orrs	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012b4:	f023 0307 	bic.w	r3, r3, #7
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001304:	f023 0307 	bic.w	r3, r3, #7
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001314:	bf00      	nop
 8001316:	3724      	adds	r7, #36	; 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 800133e:	e005      	b.n	800134c <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 0201 	bic.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 800136e:	2304      	movs	r3, #4
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e016      	b.n	80013a2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d102      	bne.n	8001380 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 800137a:	2303      	movs	r3, #3
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e010      	b.n	80013a2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b04      	cmp	r3, #4
 8001384:	d008      	beq.n	8001398 <LTDC_LayerPixelFormat+0x40>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d005      	beq.n	8001398 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d002      	beq.n	8001398 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b07      	cmp	r3, #7
 8001396:	d102      	bne.n	800139e <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8001398:	2302      	movs	r3, #2
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e016      	b.n	80013ee <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 80013c6:	2303      	movs	r3, #3
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e010      	b.n	80013ee <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d008      	beq.n	80013e4 <LTDC_LayerPixelFormat+0x8c>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d005      	beq.n	80013e4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d002      	beq.n	80013e4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d102      	bne.n	80013ea <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 80013e4:	2302      	movs	r3, #2
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e001      	b.n	80013ee <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	3303      	adds	r3, #3
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	611a      	str	r2, [r3, #16]
    
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8001428:	4908      	ldr	r1, [pc, #32]	; (800144c <RCC_PLLSAIConfig+0x30>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	019a      	lsls	r2, r3, #6
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	071b      	lsls	r3, r3, #28
 8001438:	4313      	orrs	r3, r2
 800143a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <RCC_PLLSAICmd+0x1c>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	42470070 	.word	0x42470070

08001470 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <RCC_LTDCCLKDivConfig+0x38>)
 800147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001482:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800148a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <RCC_LTDCCLKDivConfig+0x38>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800

080014ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80014c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80014ca:	e006      	b.n	80014da <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80014d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4013      	ands	r3, r2
 80014d8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80014fe:	490a      	ldr	r1, [pc, #40]	; (8001528 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4313      	orrs	r3, r2
 8001508:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 800150a:	e006      	b.n	800151a <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <RCC_AHB3PeriphClockCmd+0x3c>)
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	43db      	mvns	r3, r3
 8001516:	4013      	ands	r3, r2
 8001518:	638b      	str	r3, [r1, #56]	; 0x38
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <RCC_APB1PeriphClockCmd+0x3c>)
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <RCC_APB1PeriphClockCmd+0x3c>)
 8001542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4313      	orrs	r3, r2
 8001548:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800154a:	e006      	b.n	800155a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <RCC_APB1PeriphClockCmd+0x3c>)
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <RCC_APB1PeriphClockCmd+0x3c>)
 8001550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	43db      	mvns	r3, r3
 8001556:	4013      	ands	r3, r2
 8001558:	640b      	str	r3, [r1, #64]	; 0x40
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800157e:	490a      	ldr	r1, [pc, #40]	; (80015a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800158a:	e006      	b.n	800159a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <RCC_APB2PeriphClockCmd+0x3c>)
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	43db      	mvns	r3, r3
 8001596:	4013      	ands	r3, r2
 8001598:	644b      	str	r3, [r1, #68]	; 0x44
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80015be:	490a      	ldr	r1, [pc, #40]	; (80015e8 <RCC_APB1PeriphResetCmd+0x3c>)
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <RCC_APB1PeriphResetCmd+0x3c>)
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80015ca:	e006      	b.n	80015da <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80015cc:	4906      	ldr	r1, [pc, #24]	; (80015e8 <RCC_APB1PeriphResetCmd+0x3c>)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <RCC_APB1PeriphResetCmd+0x3c>)
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	620b      	str	r3, [r1, #32]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80015fe:	490a      	ldr	r1, [pc, #40]	; (8001628 <RCC_APB2PeriphResetCmd+0x3c>)
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <RCC_APB2PeriphResetCmd+0x3c>)
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800160a:	e006      	b.n	800161a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <RCC_APB2PeriphResetCmd+0x3c>)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <RCC_APB2PeriphResetCmd+0x3c>)
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	43db      	mvns	r3, r3
 8001616:	4013      	ands	r3, r2
 8001618:	624b      	str	r3, [r1, #36]	; 0x24
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	b2db      	uxtb	r3, r3
 8001648:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d103      	bne.n	8001658 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <RCC_GetFlagStatus+0x70>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e009      	b.n	800166c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d103      	bne.n	8001666 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <RCC_GetFlagStatus+0x70>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e002      	b.n	800166c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <RCC_GetFlagStatus+0x70>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001684:	2301      	movs	r3, #1
 8001686:	74fb      	strb	r3, [r7, #19]
 8001688:	e001      	b.n	800168e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800168e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40023800 	.word	0x40023800

080016a0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <SPI_I2S_DeInit+0xc4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10a      	bne.n	80016c6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80016b0:	2101      	movs	r1, #1
 80016b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016b6:	f7ff ff99 	bl	80015ec <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80016ba:	2100      	movs	r1, #0
 80016bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016c0:	f7ff ff94 	bl	80015ec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80016c4:	e049      	b.n	800175a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <SPI_I2S_DeInit+0xc8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10a      	bne.n	80016e4 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80016ce:	2101      	movs	r1, #1
 80016d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016d4:	f7ff ff6a 	bl	80015ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80016d8:	2100      	movs	r1, #0
 80016da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016de:	f7ff ff65 	bl	80015ac <RCC_APB1PeriphResetCmd>
}
 80016e2:	e03a      	b.n	800175a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <SPI_I2S_DeInit+0xcc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10a      	bne.n	8001702 <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80016ec:	2101      	movs	r1, #1
 80016ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016f2:	f7ff ff5b 	bl	80015ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80016f6:	2100      	movs	r1, #0
 80016f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016fc:	f7ff ff56 	bl	80015ac <RCC_APB1PeriphResetCmd>
}
 8001700:	e02b      	b.n	800175a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <SPI_I2S_DeInit+0xd0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10a      	bne.n	8001720 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800170a:	2101      	movs	r1, #1
 800170c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001710:	f7ff ff6c 	bl	80015ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001714:	2100      	movs	r1, #0
 8001716:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800171a:	f7ff ff67 	bl	80015ec <RCC_APB2PeriphResetCmd>
}
 800171e:	e01c      	b.n	800175a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <SPI_I2S_DeInit+0xd4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10a      	bne.n	800173e <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001728:	2101      	movs	r1, #1
 800172a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800172e:	f7ff ff5d 	bl	80015ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001732:	2100      	movs	r1, #0
 8001734:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001738:	f7ff ff58 	bl	80015ec <RCC_APB2PeriphResetCmd>
}
 800173c:	e00d      	b.n	800175a <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <SPI_I2S_DeInit+0xd8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d109      	bne.n	800175a <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001746:	2101      	movs	r1, #1
 8001748:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800174c:	f7ff ff4e 	bl	80015ec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001750:	2100      	movs	r1, #0
 8001752:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001756:	f7ff ff49 	bl	80015ec <RCC_APB2PeriphResetCmd>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40013000 	.word	0x40013000
 8001768:	40003800 	.word	0x40003800
 800176c:	40003c00 	.word	0x40003c00
 8001770:	40013400 	.word	0x40013400
 8001774:	40015000 	.word	0x40015000
 8001778:	40015400 	.word	0x40015400

0800177c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001796:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8b9b      	ldrh	r3, [r3, #28]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	8a1a      	ldrh	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	821a      	strh	r2, [r3, #16]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8001826:	e007      	b.n	8001838 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	801a      	strh	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	819a      	strh	r2, [r3, #12]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	891b      	ldrh	r3, [r3, #8]
 8001876:	b29a      	uxth	r2, r3
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	4013      	ands	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e001      	b.n	800188c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800189c:	b490      	push	{r4, r7}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	401a      	ands	r2, r3
 80018de:	1c83      	adds	r3, r0, #2
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461c      	mov	r4, r3
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <SYSCFG_EXTILineConfig+0x80>)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018fc:	79f9      	ldrb	r1, [r7, #7]
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	431a      	orrs	r2, r3
 800190c:	1ca3      	adds	r3, r4, #2
 800190e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bc90      	pop	{r4, r7}
 800191a:	4770      	bx	lr
 800191c:	40013800 	.word	0x40013800

08001920 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <TIM_TimeBaseInit+0xbc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <TIM_TimeBaseInit+0x44>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <TIM_TimeBaseInit+0xc0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00f      	beq.n	8001964 <TIM_TimeBaseInit+0x44>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d00b      	beq.n	8001964 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <TIM_TimeBaseInit+0xc4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <TIM_TimeBaseInit+0x44>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <TIM_TimeBaseInit+0xc8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <TIM_TimeBaseInit+0xcc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d108      	bne.n	8001976 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	885a      	ldrh	r2, [r3, #2]
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	4313      	orrs	r3, r2
 8001974:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <TIM_TimeBaseInit+0xd0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00c      	beq.n	8001998 <TIM_TimeBaseInit+0x78>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <TIM_TimeBaseInit+0xd4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d008      	beq.n	8001998 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	891a      	ldrh	r2, [r3, #8]
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	4313      	orrs	r3, r2
 8001996:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	89fa      	ldrh	r2, [r7, #14]
 800199c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <TIM_TimeBaseInit+0xbc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d003      	beq.n	80019be <TIM_TimeBaseInit+0x9e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <TIM_TimeBaseInit+0xc0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d104      	bne.n	80019c8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7a9b      	ldrb	r3, [r3, #10]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	829a      	strh	r2, [r3, #20]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40010400 	.word	0x40010400
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	40001000 	.word	0x40001000
 80019f4:	40001400 	.word	0x40001400

080019f8 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001a4e:	e007      	b.n	8001a60 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	801a      	strh	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	899b      	ldrh	r3, [r3, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001a92:	e009      	b.n	8001aa8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	819a      	strh	r2, [r3, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	81bb      	strh	r3, [r7, #12]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8a1b      	ldrh	r3, [r3, #16]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	899b      	ldrh	r3, [r3, #12]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <TIM_GetITStatus+0x42>
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	821a      	strh	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fcb3 	bl	80014ac <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001b46:	2101      	movs	r1, #1
 8001b48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b4c:	f7ff fd0e 	bl	800156c <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b50:	2300      	movs	r3, #0
 8001b52:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <STM_EVAL_PBInit+0x94>)
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	f107 0218 	add.w	r2, r7, #24
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8ce 	bl	8000d0c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d11f      	bne.n	8001bb6 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe8d 	bl	800189c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001b82:	2301      	movs	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b86:	2300      	movs	r3, #0
 8001b88:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fed4 	bl	8000944 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb1b 	bl	80001ec <NVIC_Init>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4a06      	ldr	r2, [pc, #24]	; (8001bec <STM_EVAL_PBGetState+0x28>)
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f924 	bl	8000e28 <GPIO_ReadInputDataBit>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <DMA1_Stream4_IRQHandler+0x60>)
 8001bf6:	4817      	ldr	r0, [pc, #92]	; (8001c54 <DMA1_Stream4_IRQHandler+0x64>)
 8001bf8:	f7fe fd7a 	bl	80006f0 <DMA_GetFlagStatus>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8001c02:	2100      	movs	r1, #0
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <DMA1_Stream4_IRQHandler+0x64>)
 8001c06:	f7fe fd57 	bl	80006b8 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8001c0a:	4911      	ldr	r1, [pc, #68]	; (8001c50 <DMA1_Stream4_IRQHandler+0x60>)
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <DMA1_Stream4_IRQHandler+0x64>)
 8001c0e:	f7fe fdab 	bl	8000768 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <DMA1_Stream4_IRQHandler+0x68>)
 8001c14:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001c18:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001c1a:	e008      	b.n	8001c2e <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <DMA1_Stream4_IRQHandler+0x68>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	490d      	ldr	r1, [pc, #52]	; (8001c58 <DMA1_Stream4_IRQHandler+0x68>)
 8001c24:	600a      	str	r2, [r1, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <DMA1_Stream4_IRQHandler+0x3e>
 8001c2a:	f001 fcbb 	bl	80035a4 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001c2e:	490b      	ldr	r1, [pc, #44]	; (8001c5c <DMA1_Stream4_IRQHandler+0x6c>)
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <DMA1_Stream4_IRQHandler+0x70>)
 8001c32:	f7ff f9c4 	bl	8000fbe <I2C_GetFlagStatus>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ef      	beq.n	8001c1c <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4808      	ldr	r0, [pc, #32]	; (8001c60 <DMA1_Stream4_IRQHandler+0x70>)
 8001c40:	f7ff f99d 	bl	8000f7e <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <DMA1_Stream4_IRQHandler+0x74>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000020 	.word	0x20000020
 8001c54:	40026070 	.word	0x40026070
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	10000004 	.word	0x10000004
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	20000064 	.word	0x20000064

08001c68 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8001c6c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <DMA1_Stream2_IRQHandler+0x3c>)
 8001c72:	f7fe fd3d 	bl	80006f0 <DMA_GetFlagStatus>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <DMA1_Stream2_IRQHandler+0x40>)
 8001c80:	f7ff f97d 	bl	8000f7e <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8001c84:	2100      	movs	r1, #0
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <DMA1_Stream2_IRQHandler+0x3c>)
 8001c88:	f7fe fd16 	bl	80006b8 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8001c8c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <DMA1_Stream2_IRQHandler+0x3c>)
 8001c92:	f7fe fd69 	bl	8000768 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <DMA1_Stream2_IRQHandler+0x44>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	801a      	strh	r2, [r3, #0]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40026040 	.word	0x40026040
 8001ca8:	40005c00 	.word	0x40005c00
 8001cac:	2000006c 	.word	0x2000006c

08001cb0 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b092      	sub	sp, #72	; 0x48
 8001cb4:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  GPIO_InitTypeDef       GPIO_InitStructure;
  
  /* Enable clock for NCS port */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2008      	movs	r0, #8
 8001cba:	f7ff fbf7 	bl	80014ac <RCC_AHB1PeriphClockCmd>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482d      	ldr	r0, [pc, #180]	; (8001d90 <LCD_Init+0xe0>)
 8001cda:	f7ff f817 	bl	8000d0c <GPIO_Init>
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8001cde:	f000 fa79 	bl	80021d4 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f8b2 	bl	8001e4c <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 f8af 	bl	8001e4c <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8001cee:	f000 faa5 	bl	800223c <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8001cf2:	f000 f927 	bl	8001f44 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001cfc:	f7ff fc36 	bl	800156c <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8001d00:	2101      	movs	r1, #1
 8001d02:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d06:	f7ff fbd1 	bl	80014ac <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8001d0a:	f000 fafb 	bl	8002304 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8001d0e:	f000 fbca 	bl	80024a6 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8001d22:	2300      	movs	r3, #0
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8001d26:	2300      	movs	r3, #0
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8001d2e:	2204      	movs	r2, #4
 8001d30:	2107      	movs	r1, #7
 8001d32:	20c0      	movs	r0, #192	; 0xc0
 8001d34:	f7ff fb72 	bl	800141c <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8001d38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d3c:	f7ff fb98 	bl	8001470 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fb85 	bl	8001450 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8001d46:	bf00      	nop
 8001d48:	203d      	movs	r0, #61	; 0x3d
 8001d4a:	f7ff fc6f 	bl	800162c <RCC_GetFlagStatus>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f9      	beq.n	8001d48 <LCD_Init+0x98>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8001d54:	2309      	movs	r3, #9
 8001d56:	61fb      	str	r3, [r7, #28]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8001d5c:	231d      	movs	r3, #29
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8001d60:	2303      	movs	r3, #3
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8001d64:	f240 130d 	movw	r3, #269	; 0x10d
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8001d6a:	f240 1343 	movw	r3, #323	; 0x143
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8001d70:	f240 1317 	movw	r3, #279	; 0x117
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8001d76:	f240 1347 	movw	r3, #327	; 0x147
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  LTDC_Init(&LTDC_InitStruct);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f94f 	bl	8001024 <LTDC_Init>
}  
 8001d86:	bf00      	nop
 8001d88:	3748      	adds	r7, #72	; 0x48
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020c00 	.word	0x40020c00

08001d94 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b090      	sub	sp, #64	; 0x40
 8001d98:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8001d9a:	231e      	movs	r3, #30
 8001d9c:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8001d9e:	f240 130d 	movw	r3, #269	; 0x10d
 8001da2:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8001da4:	2304      	movs	r3, #4
 8001da6:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8001da8:	f240 1343 	movw	r3, #323	; 0x143
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8001dae:	2302      	movs	r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8001db2:	23ff      	movs	r3, #255	; 0xff
 8001db4:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8001dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8001dcc:	2305      	movs	r3, #5
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8001dd0:	f240 13e3 	movw	r3, #483	; 0x1e3
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8001dd6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8001ddc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8001de2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4813      	ldr	r0, [pc, #76]	; (8001e3c <LCD_LayerInit+0xa8>)
 8001dee:	f7ff f9fd 	bl	80011ec <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <LCD_LayerInit+0xac>)
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8001df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	480f      	ldr	r0, [pc, #60]	; (8001e44 <LCD_LayerInit+0xb0>)
 8001e06:	f7ff f9f1 	bl	80011ec <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f9de 	bl	80011cc <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8001e10:	2101      	movs	r1, #1
 8001e12:	480a      	ldr	r0, [pc, #40]	; (8001e3c <LCD_LayerInit+0xa8>)
 8001e14:	f7ff fa84 	bl	8001320 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	480a      	ldr	r0, [pc, #40]	; (8001e44 <LCD_LayerInit+0xb0>)
 8001e1c:	f7ff fa80 	bl	8001320 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff f9d3 	bl	80011cc <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <LCD_LayerInit+0xb4>)
 8001e28:	f000 f828 	bl	8001e7c <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff f9af 	bl	8001190 <LTDC_DitherCmd>
}
 8001e32:	bf00      	nop
 8001e34:	3740      	adds	r7, #64	; 0x40
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40016884 	.word	0x40016884
 8001e40:	d0050000 	.word	0xd0050000
 8001e44:	40016904 	.word	0x40016904
 8001e48:	20000000 	.word	0x20000000

08001e4c <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	4806      	ldr	r0, [pc, #24]	; (8001e78 <LCD_ChipSelect+0x2c>)
 8001e60:	f7ff f80b 	bl	8000e7a <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 8001e64:	e003      	b.n	8001e6e <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8001e66:	2104      	movs	r1, #4
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <LCD_ChipSelect+0x2c>)
 8001e6a:	f7fe fff7 	bl	8000e5c <GPIO_SetBits>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020800 	.word	0x40020800

08001e7c <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <LCD_SetFont+0x1c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000038 	.word	0x20000038

08001e9c <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eac:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <LCD_WriteCommand+0x4c>)
 8001eae:	f000 f9b3 	bl	8002218 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff ffca 	bl	8001e4c <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <LCD_WriteCommand+0x50>)
 8001ec0:	f7ff fcc0 	bl	8001844 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8001ec4:	bf00      	nop
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <LCD_WriteCommand+0x50>)
 8001eca:	f7ff fcca 	bl	8001862 <SPI_I2S_GetFlagStatus>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f8      	bne.n	8001ec6 <LCD_WriteCommand+0x2a>
  delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f000 fad1 	bl	800247c <delay>
  LCD_ChipSelect(ENABLE);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff ffb6 	bl	8001e4c <LCD_ChipSelect>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40015000 	.word	0x40015000

08001ef0 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f00:	480e      	ldr	r0, [pc, #56]	; (8001f3c <LCD_WriteData+0x4c>)
 8001f02:	f000 f989 	bl	8002218 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff ffa0 	bl	8001e4c <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <LCD_WriteData+0x50>)
 8001f14:	f7ff fc96 	bl	8001844 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8001f18:	bf00      	nop
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <LCD_WriteData+0x50>)
 8001f1e:	f7ff fca0 	bl	8001862 <SPI_I2S_GetFlagStatus>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f8      	bne.n	8001f1a <LCD_WriteData+0x2a>
  delay(10);
 8001f28:	200a      	movs	r0, #10
 8001f2a:	f000 faa7 	bl	800247c <delay>
  LCD_ChipSelect(ENABLE);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff ff8c 	bl	8001e4c <LCD_ChipSelect>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40015000 	.word	0x40015000

08001f44 <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8001f48:	20ca      	movs	r0, #202	; 0xca
 8001f4a:	f7ff ffa7 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8001f4e:	20c3      	movs	r0, #195	; 0xc3
 8001f50:	f7ff ffce 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x08);
 8001f54:	2008      	movs	r0, #8
 8001f56:	f7ff ffcb 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x50);
 8001f5a:	2050      	movs	r0, #80	; 0x50
 8001f5c:	f7ff ffc8 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8001f60:	20cf      	movs	r0, #207	; 0xcf
 8001f62:	f7ff ff9b 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff ffc2 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8001f6c:	20c1      	movs	r0, #193	; 0xc1
 8001f6e:	f7ff ffbf 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x30);
 8001f72:	2030      	movs	r0, #48	; 0x30
 8001f74:	f7ff ffbc 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8001f78:	20ed      	movs	r0, #237	; 0xed
 8001f7a:	f7ff ff8f 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8001f7e:	2064      	movs	r0, #100	; 0x64
 8001f80:	f7ff ffb6 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x03);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f7ff ffb3 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x12);
 8001f8a:	2012      	movs	r0, #18
 8001f8c:	f7ff ffb0 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x81);
 8001f90:	2081      	movs	r0, #129	; 0x81
 8001f92:	f7ff ffad 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 8001f96:	20e8      	movs	r0, #232	; 0xe8
 8001f98:	f7ff ff80 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8001f9c:	2085      	movs	r0, #133	; 0x85
 8001f9e:	f7ff ffa7 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ffa4 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f7ff ffa1 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8001fae:	20cb      	movs	r0, #203	; 0xcb
 8001fb0:	f7ff ff74 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8001fb4:	2039      	movs	r0, #57	; 0x39
 8001fb6:	f7ff ff9b 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8001fba:	202c      	movs	r0, #44	; 0x2c
 8001fbc:	f7ff ff98 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ff95 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x34);
 8001fc6:	2034      	movs	r0, #52	; 0x34
 8001fc8:	f7ff ff92 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x02);
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f7ff ff8f 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8001fd2:	20f7      	movs	r0, #247	; 0xf7
 8001fd4:	f7ff ff62 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8001fd8:	2020      	movs	r0, #32
 8001fda:	f7ff ff89 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8001fde:	20ea      	movs	r0, #234	; 0xea
 8001fe0:	f7ff ff5c 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff ff83 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff ff80 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8001ff0:	20b1      	movs	r0, #177	; 0xb1
 8001ff2:	f7ff ff53 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff ff7a 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8001ffc:	201b      	movs	r0, #27
 8001ffe:	f7ff ff77 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8002002:	20b6      	movs	r0, #182	; 0xb6
 8002004:	f7ff ff4a 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8002008:	200a      	movs	r0, #10
 800200a:	f7ff ff71 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0xA2);
 800200e:	20a2      	movs	r0, #162	; 0xa2
 8002010:	f7ff ff6e 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8002014:	20c0      	movs	r0, #192	; 0xc0
 8002016:	f7ff ff41 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800201a:	2010      	movs	r0, #16
 800201c:	f7ff ff68 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8002020:	20c1      	movs	r0, #193	; 0xc1
 8002022:	f7ff ff3b 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8002026:	2010      	movs	r0, #16
 8002028:	f7ff ff62 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 800202c:	20c5      	movs	r0, #197	; 0xc5
 800202e:	f7ff ff35 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8002032:	2045      	movs	r0, #69	; 0x45
 8002034:	f7ff ff5c 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x15);
 8002038:	2015      	movs	r0, #21
 800203a:	f7ff ff59 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 800203e:	20c7      	movs	r0, #199	; 0xc7
 8002040:	f7ff ff2c 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8002044:	2090      	movs	r0, #144	; 0x90
 8002046:	f7ff ff53 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 800204a:	2036      	movs	r0, #54	; 0x36
 800204c:	f7ff ff26 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8002050:	20c8      	movs	r0, #200	; 0xc8
 8002052:	f7ff ff4d 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8002056:	20f2      	movs	r0, #242	; 0xf2
 8002058:	f7ff ff20 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff ff47 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8002062:	20b0      	movs	r0, #176	; 0xb0
 8002064:	f7ff ff1a 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8002068:	20c2      	movs	r0, #194	; 0xc2
 800206a:	f7ff ff41 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 800206e:	20b6      	movs	r0, #182	; 0xb6
 8002070:	f7ff ff14 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8002074:	200a      	movs	r0, #10
 8002076:	f7ff ff3b 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0xA7);
 800207a:	20a7      	movs	r0, #167	; 0xa7
 800207c:	f7ff ff38 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x27);
 8002080:	2027      	movs	r0, #39	; 0x27
 8002082:	f7ff ff35 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8002086:	2004      	movs	r0, #4
 8002088:	f7ff ff32 	bl	8001ef0 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 800208c:	202a      	movs	r0, #42	; 0x2a
 800208e:	f7ff ff05 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff2c 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ff29 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff ff26 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0xEF);
 80020a4:	20ef      	movs	r0, #239	; 0xef
 80020a6:	f7ff ff23 	bl	8001ef0 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80020aa:	202b      	movs	r0, #43	; 0x2b
 80020ac:	f7ff fef6 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ff1d 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff ff1a 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x01);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff ff17 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x3F);
 80020c2:	203f      	movs	r0, #63	; 0x3f
 80020c4:	f7ff ff14 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80020c8:	20f6      	movs	r0, #246	; 0xf6
 80020ca:	f7ff fee7 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff ff0e 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff ff0b 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x06);
 80020da:	2006      	movs	r0, #6
 80020dc:	f7ff ff08 	bl	8001ef0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80020e0:	202c      	movs	r0, #44	; 0x2c
 80020e2:	f7ff fedb 	bl	8001e9c <LCD_WriteCommand>
  delay(200);
 80020e6:	20c8      	movs	r0, #200	; 0xc8
 80020e8:	f000 f9c8 	bl	800247c <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 80020ec:	2026      	movs	r0, #38	; 0x26
 80020ee:	f7ff fed5 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff fefc 	bl	8001ef0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80020f8:	20e0      	movs	r0, #224	; 0xe0
 80020fa:	f7ff fecf 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff fef6 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x29);
 8002104:	2029      	movs	r0, #41	; 0x29
 8002106:	f7ff fef3 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x24);
 800210a:	2024      	movs	r0, #36	; 0x24
 800210c:	f7ff fef0 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8002110:	200c      	movs	r0, #12
 8002112:	f7ff feed 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8002116:	200e      	movs	r0, #14
 8002118:	f7ff feea 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x09);
 800211c:	2009      	movs	r0, #9
 800211e:	f7ff fee7 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8002122:	204e      	movs	r0, #78	; 0x4e
 8002124:	f7ff fee4 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8002128:	2078      	movs	r0, #120	; 0x78
 800212a:	f7ff fee1 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x3C);
 800212e:	203c      	movs	r0, #60	; 0x3c
 8002130:	f7ff fede 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x09);
 8002134:	2009      	movs	r0, #9
 8002136:	f7ff fedb 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x13);
 800213a:	2013      	movs	r0, #19
 800213c:	f7ff fed8 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002140:	2005      	movs	r0, #5
 8002142:	f7ff fed5 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x17);
 8002146:	2017      	movs	r0, #23
 8002148:	f7ff fed2 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x11);
 800214c:	2011      	movs	r0, #17
 800214e:	f7ff fecf 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fecc 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8002158:	20e1      	movs	r0, #225	; 0xe1
 800215a:	f7ff fe9f 	bl	8001e9c <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff fec6 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x16);
 8002164:	2016      	movs	r0, #22
 8002166:	f7ff fec3 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 800216a:	201b      	movs	r0, #27
 800216c:	f7ff fec0 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8002170:	2004      	movs	r0, #4
 8002172:	f7ff febd 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8002176:	2011      	movs	r0, #17
 8002178:	f7ff feba 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x07);
 800217c:	2007      	movs	r0, #7
 800217e:	f7ff feb7 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x31);
 8002182:	2031      	movs	r0, #49	; 0x31
 8002184:	f7ff feb4 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x33);
 8002188:	2033      	movs	r0, #51	; 0x33
 800218a:	f7ff feb1 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x42);
 800218e:	2042      	movs	r0, #66	; 0x42
 8002190:	f7ff feae 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002194:	2005      	movs	r0, #5
 8002196:	f7ff feab 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 800219a:	200c      	movs	r0, #12
 800219c:	f7ff fea8 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x0A);
 80021a0:	200a      	movs	r0, #10
 80021a2:	f7ff fea5 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x28);
 80021a6:	2028      	movs	r0, #40	; 0x28
 80021a8:	f7ff fea2 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x2F);
 80021ac:	202f      	movs	r0, #47	; 0x2f
 80021ae:	f7ff fe9f 	bl	8001ef0 <LCD_WriteData>
  LCD_WriteData(0x0F);
 80021b2:	200f      	movs	r0, #15
 80021b4:	f7ff fe9c 	bl	8001ef0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 80021b8:	2011      	movs	r0, #17
 80021ba:	f7ff fe6f 	bl	8001e9c <LCD_WriteCommand>
  delay(200);
 80021be:	20c8      	movs	r0, #200	; 0xc8
 80021c0:	f000 f95c 	bl	800247c <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80021c4:	2029      	movs	r0, #41	; 0x29
 80021c6:	f7ff fe69 	bl	8001e9c <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 80021ca:	202c      	movs	r0, #44	; 0x2c
 80021cc:	f7ff fe66 	bl	8001e9c <LCD_WriteCommand>
 }
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 80021da:	2101      	movs	r1, #1
 80021dc:	2004      	movs	r0, #4
 80021de:	f7ff f965 	bl	80014ac <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80021e2:	2304      	movs	r3, #4
 80021e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80021e6:	2302      	movs	r3, #2
 80021e8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80021ea:	2301      	movs	r3, #1
 80021ec:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80021f6:	463b      	mov	r3, r7
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <LCD_CtrlLinesConfig+0x40>)
 80021fc:	f7fe fd86 	bl	8000d0c <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	2104      	movs	r1, #4
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <LCD_CtrlLinesConfig+0x40>)
 8002206:	f000 f807 	bl	8002218 <LCD_CtrlLinesWrite>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40020800 	.word	0x40020800

08002218 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8002228:	787a      	ldrb	r2, [r7, #1]
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fe32 	bl	8000e98 <GPIO_WriteBit>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8002242:	2101      	movs	r1, #1
 8002244:	2020      	movs	r0, #32
 8002246:	f7ff f931 	bl	80014ac <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 800224a:	2101      	movs	r1, #1
 800224c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002250:	f7ff f98c 	bl	800156c <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002258:	2302      	movs	r3, #2
 800225a:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800225c:	2302      	movs	r3, #2
 800225e:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002260:	2300      	movs	r3, #0
 8002262:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4823      	ldr	r0, [pc, #140]	; (80022fc <LCD_SPIConfig+0xc0>)
 800226e:	f7fe fd4d 	bl	8000d0c <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8002272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002276:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	4619      	mov	r1, r3
 800227c:	481f      	ldr	r0, [pc, #124]	; (80022fc <LCD_SPIConfig+0xc0>)
 800227e:	f7fe fd45 	bl	8000d0c <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8002282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002286:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4619      	mov	r1, r3
 800228c:	481b      	ldr	r0, [pc, #108]	; (80022fc <LCD_SPIConfig+0xc0>)
 800228e:	f7fe fd3d 	bl	8000d0c <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8002292:	2205      	movs	r2, #5
 8002294:	2107      	movs	r1, #7
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <LCD_SPIConfig+0xc0>)
 8002298:	f7fe fe28 	bl	8000eec <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 800229c:	2205      	movs	r2, #5
 800229e:	2108      	movs	r1, #8
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <LCD_SPIConfig+0xc0>)
 80022a2:	f7fe fe23 	bl	8000eec <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 80022a6:	2205      	movs	r2, #5
 80022a8:	2109      	movs	r1, #9
 80022aa:	4814      	ldr	r0, [pc, #80]	; (80022fc <LCD_SPIConfig+0xc0>)
 80022ac:	f7fe fe1e 	bl	8000eec <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 80022b0:	4813      	ldr	r0, [pc, #76]	; (8002300 <LCD_SPIConfig+0xc4>)
 80022b2:	f7ff f9f5 	bl	80016a0 <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 80022b6:	2300      	movs	r3, #0
 80022b8:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80022ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80022be:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80022c0:	2300      	movs	r3, #0
 80022c2:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80022c4:	2300      	movs	r3, #0
 80022c6:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80022c8:	2300      	movs	r3, #0
 80022ca:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80022cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d0:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 80022d2:	2308      	movs	r3, #8
 80022d4:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80022d6:	2300      	movs	r3, #0
 80022d8:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80022da:	2307      	movs	r3, #7
 80022dc:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4619      	mov	r1, r3
 80022e4:	4806      	ldr	r0, [pc, #24]	; (8002300 <LCD_SPIConfig+0xc4>)
 80022e6:	f7ff fa49 	bl	800177c <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 80022ea:	2101      	movs	r1, #1
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <LCD_SPIConfig+0xc4>)
 80022ee:	f7ff fa89 	bl	8001804 <SPI_Cmd>
}
 80022f2:	bf00      	nop
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021400 	.word	0x40021400
 8002300:	40015000 	.word	0x40015000

08002304 <LCD_AF_GPIOConfig>:
  * @brief GPIO config for LTDC.
  * @retval
  *  None
  */
static void LCD_AF_GPIOConfig(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 800230a:	2101      	movs	r1, #1
 800230c:	206f      	movs	r0, #111	; 0x6f
 800230e:	f7ff f8cd 	bl	80014ac <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8002312:	220e      	movs	r2, #14
 8002314:	2103      	movs	r1, #3
 8002316:	4853      	ldr	r0, [pc, #332]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 8002318:	f7fe fde8 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 800231c:	220e      	movs	r2, #14
 800231e:	2104      	movs	r1, #4
 8002320:	4850      	ldr	r0, [pc, #320]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 8002322:	f7fe fde3 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8002326:	220e      	movs	r2, #14
 8002328:	2106      	movs	r1, #6
 800232a:	484e      	ldr	r0, [pc, #312]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 800232c:	f7fe fdde 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8002330:	220e      	movs	r2, #14
 8002332:	210b      	movs	r1, #11
 8002334:	484b      	ldr	r0, [pc, #300]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 8002336:	f7fe fdd9 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 800233a:	220e      	movs	r2, #14
 800233c:	210c      	movs	r1, #12
 800233e:	4849      	ldr	r0, [pc, #292]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 8002340:	f7fe fdd4 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8002344:	f641 0358 	movw	r3, #6232	; 0x1858
 8002348:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800234a:	2302      	movs	r3, #2
 800234c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800234e:	2302      	movs	r3, #2
 8002350:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002352:	2300      	movs	r3, #0
 8002354:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	463b      	mov	r3, r7
 800235c:	4619      	mov	r1, r3
 800235e:	4841      	ldr	r0, [pc, #260]	; (8002464 <LCD_AF_GPIOConfig+0x160>)
 8002360:	f7fe fcd4 	bl	8000d0c <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8002364:	2209      	movs	r2, #9
 8002366:	2100      	movs	r1, #0
 8002368:	483f      	ldr	r0, [pc, #252]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 800236a:	f7fe fdbf 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 800236e:	2209      	movs	r2, #9
 8002370:	2101      	movs	r1, #1
 8002372:	483d      	ldr	r0, [pc, #244]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 8002374:	f7fe fdba 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8002378:	220e      	movs	r2, #14
 800237a:	2108      	movs	r1, #8
 800237c:	483a      	ldr	r0, [pc, #232]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 800237e:	f7fe fdb5 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8002382:	220e      	movs	r2, #14
 8002384:	2109      	movs	r1, #9
 8002386:	4838      	ldr	r0, [pc, #224]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 8002388:	f7fe fdb0 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 800238c:	220e      	movs	r2, #14
 800238e:	210a      	movs	r1, #10
 8002390:	4835      	ldr	r0, [pc, #212]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 8002392:	f7fe fdab 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8002396:	220e      	movs	r2, #14
 8002398:	210b      	movs	r1, #11
 800239a:	4833      	ldr	r0, [pc, #204]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 800239c:	f7fe fda6 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 80023a0:	f640 7303 	movw	r3, #3843	; 0xf03
 80023a4:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	463b      	mov	r3, r7
 80023a8:	4619      	mov	r1, r3
 80023aa:	482f      	ldr	r0, [pc, #188]	; (8002468 <LCD_AF_GPIOConfig+0x164>)
 80023ac:	f7fe fcae 	bl	8000d0c <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80023b0:	220e      	movs	r2, #14
 80023b2:	2106      	movs	r1, #6
 80023b4:	482d      	ldr	r0, [pc, #180]	; (800246c <LCD_AF_GPIOConfig+0x168>)
 80023b6:	f7fe fd99 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80023ba:	220e      	movs	r2, #14
 80023bc:	2107      	movs	r1, #7
 80023be:	482b      	ldr	r0, [pc, #172]	; (800246c <LCD_AF_GPIOConfig+0x168>)
 80023c0:	f7fe fd94 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 80023c4:	220e      	movs	r2, #14
 80023c6:	210a      	movs	r1, #10
 80023c8:	4828      	ldr	r0, [pc, #160]	; (800246c <LCD_AF_GPIOConfig+0x168>)
 80023ca:	f7fe fd8f 	bl	8000eec <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 80023ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80023d2:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d4:	463b      	mov	r3, r7
 80023d6:	4619      	mov	r1, r3
 80023d8:	4824      	ldr	r0, [pc, #144]	; (800246c <LCD_AF_GPIOConfig+0x168>)
 80023da:	f7fe fc97 	bl	8000d0c <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 80023de:	220e      	movs	r2, #14
 80023e0:	2103      	movs	r1, #3
 80023e2:	4823      	ldr	r0, [pc, #140]	; (8002470 <LCD_AF_GPIOConfig+0x16c>)
 80023e4:	f7fe fd82 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 80023e8:	220e      	movs	r2, #14
 80023ea:	2106      	movs	r1, #6
 80023ec:	4820      	ldr	r0, [pc, #128]	; (8002470 <LCD_AF_GPIOConfig+0x16c>)
 80023ee:	f7fe fd7d 	bl	8000eec <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 80023f2:	2348      	movs	r3, #72	; 0x48
 80023f4:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f6:	463b      	mov	r3, r7
 80023f8:	4619      	mov	r1, r3
 80023fa:	481d      	ldr	r0, [pc, #116]	; (8002470 <LCD_AF_GPIOConfig+0x16c>)
 80023fc:	f7fe fc86 	bl	8000d0c <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8002400:	220e      	movs	r2, #14
 8002402:	210a      	movs	r1, #10
 8002404:	481b      	ldr	r0, [pc, #108]	; (8002474 <LCD_AF_GPIOConfig+0x170>)
 8002406:	f7fe fd71 	bl	8000eec <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800240a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240e:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	4817      	ldr	r0, [pc, #92]	; (8002474 <LCD_AF_GPIOConfig+0x170>)
 8002416:	f7fe fc79 	bl	8000d0c <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 800241a:	220e      	movs	r2, #14
 800241c:	2106      	movs	r1, #6
 800241e:	4816      	ldr	r0, [pc, #88]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 8002420:	f7fe fd64 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8002424:	220e      	movs	r2, #14
 8002426:	2107      	movs	r1, #7
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 800242a:	f7fe fd5f 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 800242e:	2209      	movs	r2, #9
 8002430:	210a      	movs	r1, #10
 8002432:	4811      	ldr	r0, [pc, #68]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 8002434:	f7fe fd5a 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8002438:	220e      	movs	r2, #14
 800243a:	210b      	movs	r1, #11
 800243c:	480e      	ldr	r0, [pc, #56]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 800243e:	f7fe fd55 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8002442:	2209      	movs	r2, #9
 8002444:	210c      	movs	r1, #12
 8002446:	480c      	ldr	r0, [pc, #48]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 8002448:	f7fe fd50 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 800244c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8002450:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002452:	463b      	mov	r3, r7
 8002454:	4619      	mov	r1, r3
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <LCD_AF_GPIOConfig+0x174>)
 8002458:	f7fe fc58 	bl	8000d0c <GPIO_Init>
 
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40020800 	.word	0x40020800
 8002470:	40020c00 	.word	0x40020c00
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800

0800247c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e002      	b.n	8002494 <delay+0x18>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <delay+0x12>
  {
  }
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b092      	sub	sp, #72	; 0x48
 80024aa:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 80024ac:	f000 f836 	bl	800251c <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80024b0:	2101      	movs	r1, #1
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff f81a 	bl	80014ec <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 84 Mhz of SD clock frequency (168Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
 80024b8:	2302      	movs	r3, #2
 80024ba:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (6x11.90ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80024bc:	2307      	movs	r3, #7
 80024be:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.90ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;
 80024c0:	2304      	movs	r3, #4
 80024c2:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=63 (6x11.90ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 7;         
 80024c4:	2307      	movs	r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
  /* TWR:  2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
  /* TRP:  15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
 80024cc:	2302      	movs	r3, #2
 80024ce:	617b      	str	r3, [r7, #20]
  /* TRCD: 15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 80024dc:	2304      	movs	r3, #4
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80024e0:	2310      	movs	r3, #16
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 80024e4:	2340      	movs	r3, #64	; 0x40
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 80024e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80024f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80024fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002500:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8002502:	463b      	mov	r3, r7
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fab6 	bl	8000a7c <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8002510:	f000 f910 	bl	8002734 <SDRAM_InitSequence>
  
}
 8002514:	bf00      	nop
 8002516:	3748      	adds	r7, #72	; 0x48
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8002522:	2101      	movs	r1, #1
 8002524:	207e      	movs	r0, #126	; 0x7e
 8002526:	f7fe ffc1 	bl	80014ac <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800252a:	2302      	movs	r3, #2
 800252c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800252e:	2302      	movs	r3, #2
 8002530:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002532:	2300      	movs	r3, #0
 8002534:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 800253a:	220c      	movs	r2, #12
 800253c:	2105      	movs	r1, #5
 800253e:	4877      	ldr	r0, [pc, #476]	; (800271c <SDRAM_GPIOConfig+0x200>)
 8002540:	f7fe fcd4 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8002544:	220c      	movs	r2, #12
 8002546:	2106      	movs	r1, #6
 8002548:	4874      	ldr	r0, [pc, #464]	; (800271c <SDRAM_GPIOConfig+0x200>)
 800254a:	f7fe fccf 	bl	8000eec <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 800254e:	2360      	movs	r3, #96	; 0x60
 8002550:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002552:	463b      	mov	r3, r7
 8002554:	4619      	mov	r1, r3
 8002556:	4871      	ldr	r0, [pc, #452]	; (800271c <SDRAM_GPIOConfig+0x200>)
 8002558:	f7fe fbd8 	bl	8000d0c <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 800255c:	220c      	movs	r2, #12
 800255e:	2100      	movs	r1, #0
 8002560:	486f      	ldr	r0, [pc, #444]	; (8002720 <SDRAM_GPIOConfig+0x204>)
 8002562:	f7fe fcc3 	bl	8000eec <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8002566:	2301      	movs	r3, #1
 8002568:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800256a:	463b      	mov	r3, r7
 800256c:	4619      	mov	r1, r3
 800256e:	486c      	ldr	r0, [pc, #432]	; (8002720 <SDRAM_GPIOConfig+0x204>)
 8002570:	f7fe fbcc 	bl	8000d0c <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8002574:	220c      	movs	r2, #12
 8002576:	2100      	movs	r1, #0
 8002578:	486a      	ldr	r0, [pc, #424]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 800257a:	f7fe fcb7 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 800257e:	220c      	movs	r2, #12
 8002580:	2101      	movs	r1, #1
 8002582:	4868      	ldr	r0, [pc, #416]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 8002584:	f7fe fcb2 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8002588:	220c      	movs	r2, #12
 800258a:	2108      	movs	r1, #8
 800258c:	4865      	ldr	r0, [pc, #404]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 800258e:	f7fe fcad 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8002592:	220c      	movs	r2, #12
 8002594:	2109      	movs	r1, #9
 8002596:	4863      	ldr	r0, [pc, #396]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 8002598:	f7fe fca8 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 800259c:	220c      	movs	r2, #12
 800259e:	210a      	movs	r1, #10
 80025a0:	4860      	ldr	r0, [pc, #384]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 80025a2:	f7fe fca3 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80025a6:	220c      	movs	r2, #12
 80025a8:	210e      	movs	r1, #14
 80025aa:	485e      	ldr	r0, [pc, #376]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 80025ac:	f7fe fc9e 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80025b0:	220c      	movs	r2, #12
 80025b2:	210f      	movs	r1, #15
 80025b4:	485b      	ldr	r0, [pc, #364]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 80025b6:	f7fe fc99 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80025ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80025be:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	4857      	ldr	r0, [pc, #348]	; (8002724 <SDRAM_GPIOConfig+0x208>)
 80025c6:	f7fe fba1 	bl	8000d0c <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 80025ca:	220c      	movs	r2, #12
 80025cc:	2100      	movs	r1, #0
 80025ce:	4856      	ldr	r0, [pc, #344]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 80025d0:	f7fe fc8c 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 80025d4:	220c      	movs	r2, #12
 80025d6:	2101      	movs	r1, #1
 80025d8:	4853      	ldr	r0, [pc, #332]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 80025da:	f7fe fc87 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 80025de:	220c      	movs	r2, #12
 80025e0:	2107      	movs	r1, #7
 80025e2:	4851      	ldr	r0, [pc, #324]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 80025e4:	f7fe fc82 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 80025e8:	220c      	movs	r2, #12
 80025ea:	2108      	movs	r1, #8
 80025ec:	484e      	ldr	r0, [pc, #312]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 80025ee:	f7fe fc7d 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80025f2:	220c      	movs	r2, #12
 80025f4:	2109      	movs	r1, #9
 80025f6:	484c      	ldr	r0, [pc, #304]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 80025f8:	f7fe fc78 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 80025fc:	220c      	movs	r2, #12
 80025fe:	210a      	movs	r1, #10
 8002600:	4849      	ldr	r0, [pc, #292]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 8002602:	f7fe fc73 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8002606:	220c      	movs	r2, #12
 8002608:	210b      	movs	r1, #11
 800260a:	4847      	ldr	r0, [pc, #284]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 800260c:	f7fe fc6e 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8002610:	220c      	movs	r2, #12
 8002612:	210c      	movs	r1, #12
 8002614:	4844      	ldr	r0, [pc, #272]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 8002616:	f7fe fc69 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 800261a:	220c      	movs	r2, #12
 800261c:	210d      	movs	r1, #13
 800261e:	4842      	ldr	r0, [pc, #264]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 8002620:	f7fe fc64 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8002624:	220c      	movs	r2, #12
 8002626:	210e      	movs	r1, #14
 8002628:	483f      	ldr	r0, [pc, #252]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 800262a:	f7fe fc5f 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 800262e:	220c      	movs	r2, #12
 8002630:	210f      	movs	r1, #15
 8002632:	483d      	ldr	r0, [pc, #244]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 8002634:	f7fe fc5a 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8002638:	f64f 7383 	movw	r3, #65411	; 0xff83
 800263c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4839      	ldr	r0, [pc, #228]	; (8002728 <SDRAM_GPIOConfig+0x20c>)
 8002644:	f7fe fb62 	bl	8000d0c <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8002648:	220c      	movs	r2, #12
 800264a:	2100      	movs	r1, #0
 800264c:	4837      	ldr	r0, [pc, #220]	; (800272c <SDRAM_GPIOConfig+0x210>)
 800264e:	f7fe fc4d 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8002652:	220c      	movs	r2, #12
 8002654:	2101      	movs	r1, #1
 8002656:	4835      	ldr	r0, [pc, #212]	; (800272c <SDRAM_GPIOConfig+0x210>)
 8002658:	f7fe fc48 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 800265c:	220c      	movs	r2, #12
 800265e:	2102      	movs	r1, #2
 8002660:	4832      	ldr	r0, [pc, #200]	; (800272c <SDRAM_GPIOConfig+0x210>)
 8002662:	f7fe fc43 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8002666:	220c      	movs	r2, #12
 8002668:	2103      	movs	r1, #3
 800266a:	4830      	ldr	r0, [pc, #192]	; (800272c <SDRAM_GPIOConfig+0x210>)
 800266c:	f7fe fc3e 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8002670:	220c      	movs	r2, #12
 8002672:	2104      	movs	r1, #4
 8002674:	482d      	ldr	r0, [pc, #180]	; (800272c <SDRAM_GPIOConfig+0x210>)
 8002676:	f7fe fc39 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 800267a:	220c      	movs	r2, #12
 800267c:	2105      	movs	r1, #5
 800267e:	482b      	ldr	r0, [pc, #172]	; (800272c <SDRAM_GPIOConfig+0x210>)
 8002680:	f7fe fc34 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 8002684:	220c      	movs	r2, #12
 8002686:	210b      	movs	r1, #11
 8002688:	4828      	ldr	r0, [pc, #160]	; (800272c <SDRAM_GPIOConfig+0x210>)
 800268a:	f7fe fc2f 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 800268e:	220c      	movs	r2, #12
 8002690:	210c      	movs	r1, #12
 8002692:	4826      	ldr	r0, [pc, #152]	; (800272c <SDRAM_GPIOConfig+0x210>)
 8002694:	f7fe fc2a 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8002698:	220c      	movs	r2, #12
 800269a:	210d      	movs	r1, #13
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <SDRAM_GPIOConfig+0x210>)
 800269e:	f7fe fc25 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 80026a2:	220c      	movs	r2, #12
 80026a4:	210e      	movs	r1, #14
 80026a6:	4821      	ldr	r0, [pc, #132]	; (800272c <SDRAM_GPIOConfig+0x210>)
 80026a8:	f7fe fc20 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80026ac:	220c      	movs	r2, #12
 80026ae:	210f      	movs	r1, #15
 80026b0:	481e      	ldr	r0, [pc, #120]	; (800272c <SDRAM_GPIOConfig+0x210>)
 80026b2:	f7fe fc1b 	bl	8000eec <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80026b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026ba:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80026bc:	463b      	mov	r3, r7
 80026be:	4619      	mov	r1, r3
 80026c0:	481a      	ldr	r0, [pc, #104]	; (800272c <SDRAM_GPIOConfig+0x210>)
 80026c2:	f7fe fb23 	bl	8000d0c <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80026c6:	220c      	movs	r2, #12
 80026c8:	2100      	movs	r1, #0
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026cc:	f7fe fc0e 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 80026d0:	220c      	movs	r2, #12
 80026d2:	2101      	movs	r1, #1
 80026d4:	4816      	ldr	r0, [pc, #88]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026d6:	f7fe fc09 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 80026da:	220c      	movs	r2, #12
 80026dc:	2104      	movs	r1, #4
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026e0:	f7fe fc04 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 80026e4:	220c      	movs	r2, #12
 80026e6:	2105      	movs	r1, #5
 80026e8:	4811      	ldr	r0, [pc, #68]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026ea:	f7fe fbff 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 80026ee:	220c      	movs	r2, #12
 80026f0:	2108      	movs	r1, #8
 80026f2:	480f      	ldr	r0, [pc, #60]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026f4:	f7fe fbfa 	bl	8000eec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80026f8:	220c      	movs	r2, #12
 80026fa:	210f      	movs	r1, #15
 80026fc:	480c      	ldr	r0, [pc, #48]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 80026fe:	f7fe fbf5 	bl	8000eec <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8002702:	f248 1333 	movw	r3, #33075	; 0x8133
 8002706:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8002708:	463b      	mov	r3, r7
 800270a:	4619      	mov	r1, r3
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <SDRAM_GPIOConfig+0x214>)
 800270e:	f7fe fafd 	bl	8000d0c <GPIO_Init>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800

08002734 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 800273e:	2301      	movs	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002742:	2308      	movs	r3, #8
 8002744:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800274e:	bf00      	nop
 8002750:	2120      	movs	r1, #32
 8002752:	2001      	movs	r0, #1
 8002754:	f7fe fa9c 	bl	8000c90 <FMC_GetFlagStatus>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f8      	bne.n	8002750 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fa39 	bl	8000bd8 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8002766:	200a      	movs	r0, #10
 8002768:	f000 f85c 	bl	8002824 <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 800276c:	2302      	movs	r3, #2
 800276e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002770:	2308      	movs	r3, #8
 8002772:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800277c:	bf00      	nop
 800277e:	2120      	movs	r1, #32
 8002780:	2001      	movs	r0, #1
 8002782:	f7fe fa85 	bl	8000c90 <FMC_GetFlagStatus>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f8      	bne.n	800277e <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa22 	bl	8000bd8 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8002794:	2303      	movs	r3, #3
 8002796:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002798:	2308      	movs	r3, #8
 800279a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 800279c:	2304      	movs	r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80027a4:	bf00      	nop
 80027a6:	2120      	movs	r1, #32
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7fe fa71 	bl	8000c90 <FMC_GetFlagStatus>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f8      	bne.n	80027a6 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fa0e 	bl	8000bd8 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80027bc:	bf00      	nop
 80027be:	2120      	movs	r1, #32
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe fa65 	bl	8000c90 <FMC_GetFlagStatus>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f8      	bne.n	80027be <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fa02 	bl	8000bd8 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80027d4:	f240 2331 	movw	r3, #561	; 0x231
 80027d8:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 80027da:	2304      	movs	r3, #4
 80027dc:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80027de:	2308      	movs	r3, #8
 80027e0:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80027ea:	bf00      	nop
 80027ec:	2120      	movs	r1, #32
 80027ee:	2001      	movs	r0, #1
 80027f0:	f7fe fa4e 	bl	8000c90 <FMC_GetFlagStatus>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f8      	bne.n	80027ec <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe f9eb 	bl	8000bd8 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (7.81 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(683);
 8002802:	f240 20ab 	movw	r0, #683	; 0x2ab
 8002806:	f7fe fa07 	bl	8000c18 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800280a:	bf00      	nop
 800280c:	2120      	movs	r1, #32
 800280e:	2001      	movs	r0, #1
 8002810:	f7fe fa3e 	bl	8000c90 <FMC_GetFlagStatus>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f8      	bne.n	800280c <SDRAM_InitSequence+0xd8>
  {
  }
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <delay+0x30>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e002      	b.n	8002842 <delay+0x1e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <delay+0x18>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	000186a0 	.word	0x000186a0

08002858 <checkLimits>:
#include "LCD.h"

static uint32_t frameBuffer = LCD_FRAME_BUFFER;

// Check that column and row do not exceed the limits
int checkLimits (uint16_t col, uint16_t row) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	460a      	mov	r2, r1
 8002862:	80fb      	strh	r3, [r7, #6]
 8002864:	4613      	mov	r3, r2
 8002866:	80bb      	strh	r3, [r7, #4]
    return (col >= 0 && col < LCD_PIXEL_WIDTH && row >= 0 && row < LCD_PIXEL_HEIGHT);
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2bef      	cmp	r3, #239	; 0xef
 800286c:	d805      	bhi.n	800287a <checkLimits+0x22>
 800286e:	88bb      	ldrh	r3, [r7, #4]
 8002870:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002874:	d201      	bcs.n	800287a <checkLimits+0x22>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <checkLimits+0x24>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <ARGBtoInt>:

// Compose the 32-bit ARGB8888 color value
uint32_t ARGBtoInt(uint8_t alpha, uint8_t red, uint8_t green, uint8_t blue) {    
 8002888:	b490      	push	{r4, r7}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4604      	mov	r4, r0
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	71fb      	strb	r3, [r7, #7]
 800289a:	4603      	mov	r3, r0
 800289c:	71bb      	strb	r3, [r7, #6]
 800289e:	460b      	mov	r3, r1
 80028a0:	717b      	strb	r3, [r7, #5]
 80028a2:	4613      	mov	r3, r2
 80028a4:	713b      	strb	r3, [r7, #4]
    return (alpha << 24) | (red << 16) | (green << 8) | blue;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	061a      	lsls	r2, r3, #24
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	431a      	orrs	r2, r3
 80028b6:	793b      	ldrb	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc90      	pop	{r4, r7}
 80028c2:	4770      	bx	lr

080028c4 <changeLayer>:

// Change to background or foreground layers
void changeLayer(uint32_t layer) {
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    switch (layer) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <changeLayer+0x14>
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d005      	beq.n	80028e2 <changeLayer+0x1e>
            break;
        case LCD_FOREGROUND_LAYER:
            frameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
            break;
    }
}
 80028d6:	e008      	b.n	80028ea <changeLayer+0x26>
            frameBuffer = LCD_FRAME_BUFFER;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <changeLayer+0x34>)
 80028da:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80028de:	601a      	str	r2, [r3, #0]
            break;
 80028e0:	e003      	b.n	80028ea <changeLayer+0x26>
            frameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <changeLayer+0x34>)
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <changeLayer+0x38>)
 80028e6:	601a      	str	r2, [r3, #0]
            break;
 80028e8:	bf00      	nop
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000010 	.word	0x20000010
 80028fc:	d0050000 	.word	0xd0050000

08002900 <SetPixel>:

RetSt SetPixel(uint16_t col, uint16_t row, uint8_t alpha, uint8_t Rval, uint8_t Gval, 
uint8_t Bval ) {
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	80fb      	strh	r3, [r7, #6]
 8002912:	4603      	mov	r3, r0
 8002914:	80bb      	strh	r3, [r7, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	70fb      	strb	r3, [r7, #3]
 800291a:	4613      	mov	r3, r2
 800291c:	70bb      	strb	r3, [r7, #2]

    if (!checkLimits(col, row)) return NO_OK;
 800291e:	88ba      	ldrh	r2, [r7, #4]
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff97 	bl	8002858 <checkLimits>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <SetPixel+0x34>
 8002930:	2300      	movs	r3, #0
 8002932:	e016      	b.n	8002962 <SetPixel+0x62>

    *(__IO uint32_t*) (frameBuffer + 4 * (LCD_PIXEL_WIDTH * row + col)) = ARGBtoInt(alpha, Rval, Gval, Bval);
 8002934:	88ba      	ldrh	r2, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	461a      	mov	r2, r3
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <SetPixel+0x6c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4413      	add	r3, r2
 800294e:	461c      	mov	r4, r3
 8002950:	7f3b      	ldrb	r3, [r7, #28]
 8002952:	7e3a      	ldrb	r2, [r7, #24]
 8002954:	78b9      	ldrb	r1, [r7, #2]
 8002956:	78f8      	ldrb	r0, [r7, #3]
 8002958:	f7ff ff96 	bl	8002888 <ARGBtoInt>
 800295c:	4603      	mov	r3, r0
 800295e:	6023      	str	r3, [r4, #0]

	return OK;
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}
 800296a:	bf00      	nop
 800296c:	20000010 	.word	0x20000010

08002970 <DrawHorizontalLine>:

RetSt DrawHorizontalLine (uint16_t col_start, uint16_t col_end, uint16_t row, uint8_t alpha, 
uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b087      	sub	sp, #28
 8002974:	af02      	add	r7, sp, #8
 8002976:	4604      	mov	r4, r0
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	461a      	mov	r2, r3
 800297e:	4623      	mov	r3, r4
 8002980:	80fb      	strh	r3, [r7, #6]
 8002982:	4603      	mov	r3, r0
 8002984:	80bb      	strh	r3, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	807b      	strh	r3, [r7, #2]
 800298a:	4613      	mov	r3, r2
 800298c:	707b      	strb	r3, [r7, #1]
    if (!checkLimits(col_start, row) || !checkLimits(col_end, row)) return NO_OK;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5f 	bl	8002858 <checkLimits>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <DrawHorizontalLine+0x42>
 80029a0:	887a      	ldrh	r2, [r7, #2]
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff56 	bl	8002858 <checkLimits>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <DrawHorizontalLine+0x46>
 80029b2:	2300      	movs	r3, #0
 80029b4:	e035      	b.n	8002a22 <DrawHorizontalLine+0xb2>

	if (col_start < col_end) {
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	88bb      	ldrh	r3, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d218      	bcs.n	80029f0 <DrawHorizontalLine+0x80>
        for (uint16_t i = col_start; i <= col_end; i++) {
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	81fb      	strh	r3, [r7, #14]
 80029c2:	e010      	b.n	80029e6 <DrawHorizontalLine+0x76>
		    SetPixel(i, row, alpha, Rval, Gval, Bval);
 80029c4:	f897 4020 	ldrb.w	r4, [r7, #32]
 80029c8:	787a      	ldrb	r2, [r7, #1]
 80029ca:	8879      	ldrh	r1, [r7, #2]
 80029cc:	89f8      	ldrh	r0, [r7, #14]
 80029ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4623      	mov	r3, r4
 80029dc:	f7ff ff90 	bl	8002900 <SetPixel>
        for (uint16_t i = col_start; i <= col_end; i++) {
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	3301      	adds	r3, #1
 80029e4:	81fb      	strh	r3, [r7, #14]
 80029e6:	89fa      	ldrh	r2, [r7, #14]
 80029e8:	88bb      	ldrh	r3, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d9ea      	bls.n	80029c4 <DrawHorizontalLine+0x54>
 80029ee:	e017      	b.n	8002a20 <DrawHorizontalLine+0xb0>
	    }
    } else {
        for (uint16_t i = col_start; i >= col_end; i--) {
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	81bb      	strh	r3, [r7, #12]
 80029f4:	e010      	b.n	8002a18 <DrawHorizontalLine+0xa8>
		    SetPixel(i, row, alpha, Rval, Gval, Bval);
 80029f6:	f897 4020 	ldrb.w	r4, [r7, #32]
 80029fa:	787a      	ldrb	r2, [r7, #1]
 80029fc:	8879      	ldrh	r1, [r7, #2]
 80029fe:	89b8      	ldrh	r0, [r7, #12]
 8002a00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4623      	mov	r3, r4
 8002a0e:	f7ff ff77 	bl	8002900 <SetPixel>
        for (uint16_t i = col_start; i >= col_end; i--) {
 8002a12:	89bb      	ldrh	r3, [r7, #12]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	81bb      	strh	r3, [r7, #12]
 8002a18:	89ba      	ldrh	r2, [r7, #12]
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d2ea      	bcs.n	80029f6 <DrawHorizontalLine+0x86>
	    }
    }

	return OK;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}

08002a2a <DrawVerticalLine>:

RetSt DrawVerticalLine (uint16_t col, uint16_t row_start, uint16_t row_end, uint8_t alpha, 
uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 8002a2a:	b590      	push	{r4, r7, lr}
 8002a2c:	b087      	sub	sp, #28
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	4604      	mov	r4, r0
 8002a32:	4608      	mov	r0, r1
 8002a34:	4611      	mov	r1, r2
 8002a36:	461a      	mov	r2, r3
 8002a38:	4623      	mov	r3, r4
 8002a3a:	80fb      	strh	r3, [r7, #6]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	80bb      	strh	r3, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
    if (!checkLimits(col, row_start) || !checkLimits(col, row_end)) return NO_OK;
 8002a48:	88ba      	ldrh	r2, [r7, #4]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff02 	bl	8002858 <checkLimits>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <DrawVerticalLine+0x42>
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fef9 	bl	8002858 <checkLimits>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <DrawVerticalLine+0x46>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e035      	b.n	8002adc <DrawVerticalLine+0xb2>

    if (row_start < row_end) {
 8002a70:	88ba      	ldrh	r2, [r7, #4]
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d218      	bcs.n	8002aaa <DrawVerticalLine+0x80>
        for (uint16_t i = row_start; i <= row_end; i++) {
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	81fb      	strh	r3, [r7, #14]
 8002a7c:	e010      	b.n	8002aa0 <DrawVerticalLine+0x76>
		    SetPixel(col, i, alpha, Rval, Gval, Bval);
 8002a7e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002a82:	787a      	ldrb	r2, [r7, #1]
 8002a84:	89f9      	ldrh	r1, [r7, #14]
 8002a86:	88f8      	ldrh	r0, [r7, #6]
 8002a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4623      	mov	r3, r4
 8002a96:	f7ff ff33 	bl	8002900 <SetPixel>
        for (uint16_t i = row_start; i <= row_end; i++) {
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	81fb      	strh	r3, [r7, #14]
 8002aa0:	89fa      	ldrh	r2, [r7, #14]
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d9ea      	bls.n	8002a7e <DrawVerticalLine+0x54>
 8002aa8:	e017      	b.n	8002ada <DrawVerticalLine+0xb0>
	    }
    } else {
        for (uint16_t i = row_start; i >= row_end; i--) {
 8002aaa:	88bb      	ldrh	r3, [r7, #4]
 8002aac:	81bb      	strh	r3, [r7, #12]
 8002aae:	e010      	b.n	8002ad2 <DrawVerticalLine+0xa8>
		    SetPixel(col, i, alpha, Rval, Gval, Bval);
 8002ab0:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002ab4:	787a      	ldrb	r2, [r7, #1]
 8002ab6:	89b9      	ldrh	r1, [r7, #12]
 8002ab8:	88f8      	ldrh	r0, [r7, #6]
 8002aba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f7ff ff1a 	bl	8002900 <SetPixel>
        for (uint16_t i = row_start; i >= row_end; i--) {
 8002acc:	89bb      	ldrh	r3, [r7, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	81bb      	strh	r3, [r7, #12]
 8002ad2:	89ba      	ldrh	r2, [r7, #12]
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d2ea      	bcs.n	8002ab0 <DrawVerticalLine+0x86>
	    }
    }
	
	return OK;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}

08002ae4 <ClearScreen>:

// Clear current layer
RetSt ClearScreen (uint8_t alpha, uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4604      	mov	r4, r0
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	4603      	mov	r3, r0
 8002af8:	71bb      	strb	r3, [r7, #6]
 8002afa:	460b      	mov	r3, r1
 8002afc:	717b      	strb	r3, [r7, #5]
 8002afe:	4613      	mov	r3, r2
 8002b00:	713b      	strb	r3, [r7, #4]

	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e010      	b.n	8002b2a <ClearScreen+0x46>
	    *(__IO uint32_t*)(frameBuffer + (4*i)) = ARGBtoInt(alpha, Rval, Gval, Bval);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <ClearScreen+0x58>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	461c      	mov	r4, r3
 8002b14:	793b      	ldrb	r3, [r7, #4]
 8002b16:	797a      	ldrb	r2, [r7, #5]
 8002b18:	79b9      	ldrb	r1, [r7, #6]
 8002b1a:	79f8      	ldrb	r0, [r7, #7]
 8002b1c:	f7ff feb4 	bl	8002888 <ARGBtoInt>
 8002b20:	4603      	mov	r3, r0
 8002b22:	6023      	str	r3, [r4, #0]
	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b30:	d3ea      	bcc.n	8002b08 <ClearScreen+0x24>
	}

	return OK;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	20000010 	.word	0x20000010

08002b40 <DrawRectangle>:

RetSt DrawRectangle (uint16_t col_start, uint16_t row_start, uint16_t col_end, uint16_t row_end, 
uint8_t alpha, uint8_t Rval, uint8_t Gval, uint8_t Bval) {
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af04      	add	r7, sp, #16
 8002b46:	4604      	mov	r4, r0
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4623      	mov	r3, r4
 8002b50:	80fb      	strh	r3, [r7, #6]
 8002b52:	4603      	mov	r3, r0
 8002b54:	80bb      	strh	r3, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	807b      	strh	r3, [r7, #2]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = col_start; i <= col_end; i++) {
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	81fb      	strh	r3, [r7, #14]
 8002b62:	e013      	b.n	8002b8c <DrawRectangle+0x4c>
        DrawVerticalLine(i, row_start, row_end, alpha, Rval, Gval, Bval);
 8002b64:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002b68:	883a      	ldrh	r2, [r7, #0]
 8002b6a:	88b9      	ldrh	r1, [r7, #4]
 8002b6c:	89f8      	ldrh	r0, [r7, #14]
 8002b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4623      	mov	r3, r4
 8002b82:	f7ff ff52 	bl	8002a2a <DrawVerticalLine>
    for (uint16_t i = col_start; i <= col_end; i++) {
 8002b86:	89fb      	ldrh	r3, [r7, #14]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	81fb      	strh	r3, [r7, #14]
 8002b8c:	89fa      	ldrh	r2, [r7, #14]
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d9e7      	bls.n	8002b64 <DrawRectangle+0x24>
    }
    return OK;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <drawBackground>:

// Draw the limits, axis and sensor color rectangles 
void drawBackground() {
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af04      	add	r7, sp, #16
    // Samples zone
    DrawVerticalLine(9, 9, 311, 0xFF, 0, 0, 0);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	23ff      	movs	r3, #255	; 0xff
 8002bb2:	f240 1237 	movw	r2, #311	; 0x137
 8002bb6:	2109      	movs	r1, #9
 8002bb8:	2009      	movs	r0, #9
 8002bba:	f7ff ff36 	bl	8002a2a <DrawVerticalLine>
    DrawVerticalLine(231, 9, 311, 0xFF, 0, 0, 0);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	23ff      	movs	r3, #255	; 0xff
 8002bcc:	f240 1237 	movw	r2, #311	; 0x137
 8002bd0:	2109      	movs	r1, #9
 8002bd2:	20e7      	movs	r0, #231	; 0xe7
 8002bd4:	f7ff ff29 	bl	8002a2a <DrawVerticalLine>
    DrawHorizontalLine(9, 231, 9, 0xFF, 0, 0, 0);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	23ff      	movs	r3, #255	; 0xff
 8002be6:	2209      	movs	r2, #9
 8002be8:	21e7      	movs	r1, #231	; 0xe7
 8002bea:	2009      	movs	r0, #9
 8002bec:	f7ff fec0 	bl	8002970 <DrawHorizontalLine>
    DrawHorizontalLine(9, 231, 311, 0xFF, 0, 0, 0);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	f240 1237 	movw	r2, #311	; 0x137
 8002c02:	21e7      	movs	r1, #231	; 0xe7
 8002c04:	2009      	movs	r0, #9
 8002c06:	f7ff feb3 	bl	8002970 <DrawHorizontalLine>

    // X and Y axis
    DrawHorizontalLine(9, 231, 160, 0xFF, 0, 0, 0);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	22a0      	movs	r2, #160	; 0xa0
 8002c1a:	21e7      	movs	r1, #231	; 0xe7
 8002c1c:	2009      	movs	r0, #9
 8002c1e:	f7ff fea7 	bl	8002970 <DrawHorizontalLine>
    DrawVerticalLine(120, 9, 311, 0xFF, 0, 0, 0);
 8002c22:	2300      	movs	r3, #0
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	23ff      	movs	r3, #255	; 0xff
 8002c30:	f240 1237 	movw	r2, #311	; 0x137
 8002c34:	2109      	movs	r1, #9
 8002c36:	2078      	movs	r0, #120	; 0x78
 8002c38:	f7ff fef7 	bl	8002a2a <DrawVerticalLine>

    // Color rectangles
    DrawRectangle(2, 88, 7, 103, 0xFF, 0xFF, 0, 0); // Red - Sensor 1
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	23ff      	movs	r3, #255	; 0xff
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2367      	movs	r3, #103	; 0x67
 8002c4e:	2207      	movs	r2, #7
 8002c50:	2158      	movs	r1, #88	; 0x58
 8002c52:	2002      	movs	r0, #2
 8002c54:	f7ff ff74 	bl	8002b40 <DrawRectangle>
    DrawRectangle(2, 153, 7, 167, 0xFF, 0, 0xFF, 0); // Green - Sensor 2
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9303      	str	r3, [sp, #12]
 8002c5c:	23ff      	movs	r3, #255	; 0xff
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	23ff      	movs	r3, #255	; 0xff
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	23a7      	movs	r3, #167	; 0xa7
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	2199      	movs	r1, #153	; 0x99
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff ff66 	bl	8002b40 <DrawRectangle>
    DrawRectangle(2, 217, 7, 232, 0xFF, 0, 0, 0xFF); // Blue - Sensor 3
 8002c74:	23ff      	movs	r3, #255	; 0xff
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	23ff      	movs	r3, #255	; 0xff
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	23e8      	movs	r3, #232	; 0xe8
 8002c86:	2207      	movs	r2, #7
 8002c88:	21d9      	movs	r1, #217	; 0xd9
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	f7ff ff58 	bl	8002b40 <DrawRectangle>
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <initLCD>:

void initLCD () {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

    // Initialize LCD 
    LCD_Init();
 8002c9c:	f7ff f808 	bl	8001cb0 <LCD_Init>
    LCD_LayerInit();
 8002ca0:	f7ff f878 	bl	8001d94 <LCD_LayerInit>

    // Initialize SDRAM
    SDRAM_Init();
 8002ca4:	f7ff fbff 	bl	80024a6 <SDRAM_Init>
    FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7fd ffc8 	bl	8000c40 <FMC_SDRAMWriteProtectionConfig>

    // Set pixel format for both layers
    LTDC_Cmd(ENABLE);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe fa4f 	bl	8001154 <LTDC_Cmd>
    LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	480e      	ldr	r0, [pc, #56]	; (8002cf4 <initLCD+0x5c>)
 8002cba:	f7fe fb4d 	bl	8001358 <LTDC_LayerPixelFormat>
	LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <initLCD+0x60>)
 8002cc2:	f7fe fb49 	bl	8001358 <LTDC_LayerPixelFormat>
	LTDC_ReloadConfig(LTDC_VBReload);
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7fe fa80 	bl	80011cc <LTDC_ReloadConfig>

    // Draw first layer (background)
    ClearScreen(0xFF, 0xFF, 0xFF, 0xFF); // White
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	21ff      	movs	r1, #255	; 0xff
 8002cd2:	20ff      	movs	r0, #255	; 0xff
 8002cd4:	f7ff ff06 	bl	8002ae4 <ClearScreen>
    drawBackground();
 8002cd8:	f7ff ff61 	bl	8002b9e <drawBackground>

    // Change layer to start drawing sensor data
    changeLayer(LCD_FOREGROUND_LAYER);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7ff fdf1 	bl	80028c4 <changeLayer>
    ClearScreen(0, 0, 0, 0);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7ff fefb 	bl	8002ae4 <ClearScreen>

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40016884 	.word	0x40016884
 8002cf8:	40016904 	.word	0x40016904

08002cfc <displaySamples>:
    uint16_t col3;
} LCDPos;

LCDPos prevPos[300];

void displaySamples (Sample *buffer, int index) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 300; i++) {
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e0c0      	b.n	8002e8e <displaySamples+0x192>
        //Erase previous pixels
        SetPixel(prevPos[i].col1, i+10, 0, 0, 0, 0);
 8002d0c:	4964      	ldr	r1, [pc, #400]	; (8002ea0 <displaySamples+0x1a4>)
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	8818      	ldrh	r0, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	330a      	adds	r3, #10
 8002d22:	b299      	uxth	r1, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f7ff fde6 	bl	8002900 <SetPixel>
        SetPixel(prevPos[i].col2, i+10, 0, 0, 0, 0);
 8002d34:	495a      	ldr	r1, [pc, #360]	; (8002ea0 <displaySamples+0x1a4>)
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	3302      	adds	r3, #2
 8002d44:	8818      	ldrh	r0, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	330a      	adds	r3, #10
 8002d4c:	b299      	uxth	r1, r3
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f7ff fdd1 	bl	8002900 <SetPixel>
        SetPixel(prevPos[i].col3, i+10, 0, 0, 0, 0);
 8002d5e:	4950      	ldr	r1, [pc, #320]	; (8002ea0 <displaySamples+0x1a4>)
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	8818      	ldrh	r0, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	330a      	adds	r3, #10
 8002d76:	b299      	uxth	r1, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2300      	movs	r3, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	f7ff fdbc 	bl	8002900 <SetPixel>

        //Draw new ones
        prevPos[i].col1 = buffer[index].sensor1;
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	8818      	ldrh	r0, [r3, #0]
 8002d9a:	4941      	ldr	r1, [pc, #260]	; (8002ea0 <displaySamples+0x1a4>)
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	4602      	mov	r2, r0
 8002daa:	801a      	strh	r2, [r3, #0]
        SetPixel(buffer[index].sensor1, i+10, 0xFF, 0xFF, 0, 0);
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	8818      	ldrh	r0, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	330a      	adds	r3, #10
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	23ff      	movs	r3, #255	; 0xff
 8002dd0:	22ff      	movs	r2, #255	; 0xff
 8002dd2:	f7ff fd95 	bl	8002900 <SetPixel>
        
        prevPos[i].col2 = buffer[index].sensor2;
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	8858      	ldrh	r0, [r3, #2]
 8002de8:	492d      	ldr	r1, [pc, #180]	; (8002ea0 <displaySamples+0x1a4>)
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	440b      	add	r3, r1
 8002df6:	3302      	adds	r3, #2
 8002df8:	4602      	mov	r2, r0
 8002dfa:	801a      	strh	r2, [r3, #0]
        SetPixel(buffer[index].sensor2, i+10, 0xFF, 0, 0xFF, 0);
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	8858      	ldrh	r0, [r3, #2]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	330a      	adds	r3, #10
 8002e14:	b299      	uxth	r1, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	23ff      	movs	r3, #255	; 0xff
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	22ff      	movs	r2, #255	; 0xff
 8002e22:	f7ff fd6d 	bl	8002900 <SetPixel>
        
        prevPos[i].col3 = buffer[index].sensor3;
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	8898      	ldrh	r0, [r3, #4]
 8002e38:	4919      	ldr	r1, [pc, #100]	; (8002ea0 <displaySamples+0x1a4>)
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	440b      	add	r3, r1
 8002e46:	3304      	adds	r3, #4
 8002e48:	4602      	mov	r2, r0
 8002e4a:	801a      	strh	r2, [r3, #0]
        SetPixel(buffer[index].sensor3, i+10, 0xFF, 0, 0, 0xFF);
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	8898      	ldrh	r0, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	330a      	adds	r3, #10
 8002e64:	b299      	uxth	r1, r3
 8002e66:	23ff      	movs	r3, #255	; 0xff
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	22ff      	movs	r2, #255	; 0xff
 8002e72:	f7ff fd45 	bl	8002900 <SetPixel>

        index++;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	603b      	str	r3, [r7, #0]
        if (index == 300) index = 0;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e82:	d101      	bne.n	8002e88 <displaySamples+0x18c>
 8002e84:	2300      	movs	r3, #0
 8002e86:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 300; i++) {
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e94:	f6ff af3a 	blt.w	8002d0c <displaySamples+0x10>
    }
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000070 	.word	0x20000070

08002ea4 <initPorts>:
int sPC_counter_IN = 0;
int injectionON = 0;
uint16_t InjectionAngle = 53, InjectionTime = 3200;
uint32_t timerCountNs;

void initPorts(){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0

	//PE4 -> Debug


    GPIO_InitTypeDef gpioStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2040      	movs	r0, #64	; 0x40
 8002eae:	f7fe fafd 	bl	80014ac <RCC_AHB1PeriphClockCmd>

    gpioStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_9;
 8002eb2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8002eb6:	603b      	str	r3, [r7, #0]
	gpioStructure.GPIO_OType = GPIO_OType_PP;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	71bb      	strb	r3, [r7, #6]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOG, &gpioStructure);
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <initPorts+0x58>)
 8002ece:	f7fd ff1d 	bl	8000d0c <GPIO_Init>

	gpioStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8002ed2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ed6:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_IN;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	713b      	strb	r3, [r7, #4]
	gpioStructure.GPIO_OType = GPIO_OType_PP;
 8002edc:	2300      	movs	r3, #0
 8002ede:	71bb      	strb	r3, [r7, #6]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOG, &gpioStructure);
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	4803      	ldr	r0, [pc, #12]	; (8002efc <initPorts+0x58>)
 8002eee:	f7fd ff0d 	bl	8000d0c <GPIO_Init>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021800 	.word	0x40021800

08002f00 <updateEngineSpeed>:

/****** --- MODULE 1 --- ******/

void updateEngineSpeed() {
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
	engine_speed = engine_speed_mode ? engine_speed - 1000 : engine_speed + 1000;
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <updateEngineSpeed+0x50>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <updateEngineSpeed+0x16>
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <updateEngineSpeed+0x54>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002f14:	e003      	b.n	8002f1e <updateEngineSpeed+0x1e>
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <updateEngineSpeed+0x54>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <updateEngineSpeed+0x54>)
 8002f20:	6013      	str	r3, [r2, #0]

	if (engine_speed == 6000) {
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <updateEngineSpeed+0x54>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d103      	bne.n	8002f36 <updateEngineSpeed+0x36>
		engine_speed_mode = 1;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <updateEngineSpeed+0x50>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
	} else if (engine_speed == 1000) {
		engine_speed_mode = 0;
	}
}
 8002f34:	e007      	b.n	8002f46 <updateEngineSpeed+0x46>
	} else if (engine_speed == 1000) {
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <updateEngineSpeed+0x54>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3e:	d102      	bne.n	8002f46 <updateEngineSpeed+0x46>
		engine_speed_mode = 0;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <updateEngineSpeed+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	2000003c 	.word	0x2000003c
 8002f54:	20000014 	.word	0x20000014

08002f58 <initTimer1Ms>:

void initTimer1Ms() {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2020      	movs	r0, #32
 8002f62:	f7fe fae3 	bl	800152c <RCC_APB1PeriphClockCmd>

    timerStructure.TIM_Prescaler = 1000 - 1;
 8002f66:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002f6a:	80bb      	strh	r3, [r7, #4]
    timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	80fb      	strh	r3, [r7, #6]
    timerStructure.TIM_Period = 90 - 1;
 8002f70:	2359      	movs	r3, #89	; 0x59
 8002f72:	60bb      	str	r3, [r7, #8]
    timerStructure.TIM_ClockDivision = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM7, &timerStructure);
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480f      	ldr	r0, [pc, #60]	; (8002fbc <initTimer1Ms+0x64>)
 8002f7e:	f7fe fccf 	bl	8001920 <TIM_TimeBaseInit>
    TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8002f82:	2101      	movs	r1, #1
 8002f84:	480d      	ldr	r0, [pc, #52]	; (8002fbc <initTimer1Ms+0x64>)
 8002f86:	f7fe fdbf 	bl	8001b08 <TIM_ClearITPendingBit>

    TIM_Cmd(TIM7, ENABLE);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	480b      	ldr	r0, [pc, #44]	; (8002fbc <initTimer1Ms+0x64>)
 8002f8e:	f7fe fd4d 	bl	8001a2c <TIM_Cmd>
    TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 8002f92:	2201      	movs	r2, #1
 8002f94:	2101      	movs	r1, #1
 8002f96:	4809      	ldr	r0, [pc, #36]	; (8002fbc <initTimer1Ms+0x64>)
 8002f98:	f7fe fd68 	bl	8001a6c <TIM_ITConfig>

    //Enable timer interrupt
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8002f9c:	2337      	movs	r3, #55	; 0x37
 8002f9e:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 5; //TODO: Define priorities
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8002fac:	463b      	mov	r3, r7
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd f91c 	bl	80001ec <NVIC_Init>
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40001400 	.word	0x40001400

08002fc0 <TIM7_IRQHandler>:

int counterMs = 0;
void TIM7_IRQHandler() {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <TIM7_IRQHandler+0x3c>)
 8002fc8:	f7fe fd74 	bl	8001ab4 <TIM_GetITStatus>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d011      	beq.n	8002ff6 <TIM7_IRQHandler+0x36>
    {
    	//GPIO_ToggleBits(GPIOE, GPIO_Pin_4);
    	counterMs++;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <TIM7_IRQHandler+0x40>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a09      	ldr	r2, [pc, #36]	; (8003000 <TIM7_IRQHandler+0x40>)
 8002fda:	6013      	str	r3, [r2, #0]
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <TIM7_IRQHandler+0x3c>)
 8002fe0:	f7fe fd92 	bl	8001b08 <TIM_ClearITPendingBit>
		if (STM_EVAL_PBGetState(BUTTON_USER)) {
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fe fded 	bl	8001bc4 <STM_EVAL_PBGetState>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <TIM7_IRQHandler+0x36>
			USR_Flag = 1;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <TIM7_IRQHandler+0x44>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
		}
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40001400 	.word	0x40001400
 8003000:	20000050 	.word	0x20000050
 8003004:	20000040 	.word	0x20000040

08003008 <getHalfPeriod>:

/****** --- MODULE 2 --- ******/

//Get half period in us
uint32_t getHalfPeriod() {
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
	return (uint32_t)60 * 1000000 / engine_speed / 36 / 2;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <getHalfPeriod+0x24>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b07      	ldr	r3, [pc, #28]	; (8003030 <getHalfPeriod+0x28>)
 8003014:	fbb3 f3f2 	udiv	r3, r3, r2
 8003018:	4a06      	ldr	r2, [pc, #24]	; (8003034 <getHalfPeriod+0x2c>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	091b      	lsrs	r3, r3, #4
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000014 	.word	0x20000014
 8003030:	03938700 	.word	0x03938700
 8003034:	38e38e39 	.word	0x38e38e39

08003038 <initTimerSim>:

TIM_TimeBaseInitTypeDef timerSimulation;
void initTimerSim() {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800303e:	2101      	movs	r1, #1
 8003040:	2004      	movs	r0, #4
 8003042:	f7fe fa73 	bl	800152c <RCC_APB1PeriphClockCmd>

    timerSimulation.TIM_Prescaler = 90 - 1;
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <initTimerSim+0x6c>)
 8003048:	2259      	movs	r2, #89	; 0x59
 800304a:	801a      	strh	r2, [r3, #0]
    timerSimulation.TIM_CounterMode = TIM_CounterMode_Up;
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <initTimerSim+0x6c>)
 800304e:	2200      	movs	r2, #0
 8003050:	805a      	strh	r2, [r3, #2]
    timerSimulation.TIM_Period = getHalfPeriod();
 8003052:	f7ff ffd9 	bl	8003008 <getHalfPeriod>
 8003056:	4602      	mov	r2, r0
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <initTimerSim+0x6c>)
 800305a:	605a      	str	r2, [r3, #4]
    timerSimulation.TIM_ClockDivision = 0;
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <initTimerSim+0x6c>)
 800305e:	2200      	movs	r2, #0
 8003060:	811a      	strh	r2, [r3, #8]
    TIM_TimeBaseInit(TIM4, &timerSimulation);
 8003062:	4910      	ldr	r1, [pc, #64]	; (80030a4 <initTimerSim+0x6c>)
 8003064:	4810      	ldr	r0, [pc, #64]	; (80030a8 <initTimerSim+0x70>)
 8003066:	f7fe fc5b 	bl	8001920 <TIM_TimeBaseInit>

    //Enable timer interrupt
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 800306a:	231e      	movs	r3, #30
 800306c:	713b      	strb	r3, [r7, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0; //TODO: Define priorities
 800306e:	2300      	movs	r3, #0
 8003070:	717b      	strb	r3, [r7, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	71bb      	strb	r3, [r7, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003076:	2301      	movs	r3, #1
 8003078:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&nvicStructure);
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd f8b5 	bl	80001ec <NVIC_Init>

	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003082:	2101      	movs	r1, #1
 8003084:	4808      	ldr	r0, [pc, #32]	; (80030a8 <initTimerSim+0x70>)
 8003086:	f7fe fd3f 	bl	8001b08 <TIM_ClearITPendingBit>
	TIM_Cmd(TIM4, ENABLE);
 800308a:	2101      	movs	r1, #1
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <initTimerSim+0x70>)
 800308e:	f7fe fccd 	bl	8001a2c <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003092:	2201      	movs	r2, #1
 8003094:	2101      	movs	r1, #1
 8003096:	4804      	ldr	r0, [pc, #16]	; (80030a8 <initTimerSim+0x70>)
 8003098:	f7fe fce8 	bl	8001a6c <TIM_ITConfig>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200007d8 	.word	0x200007d8
 80030a8:	40000800 	.word	0x40000800

080030ac <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
 80030b0:	2101      	movs	r1, #1
 80030b2:	4814      	ldr	r0, [pc, #80]	; (8003104 <TIM4_IRQHandler+0x58>)
 80030b4:	f7fe fcfe 	bl	8001ab4 <TIM_GetITStatus>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d020      	beq.n	8003100 <TIM4_IRQHandler+0x54>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80030be:	2101      	movs	r1, #1
 80030c0:	4810      	ldr	r0, [pc, #64]	; (8003104 <TIM4_IRQHandler+0x58>)
 80030c2:	f7fe fd21 	bl	8001b08 <TIM_ClearITPendingBit>

		GPIO_ToggleBits(GPIOG, GPIO_Pin_2);
 80030c6:	2104      	movs	r1, #4
 80030c8:	480f      	ldr	r0, [pc, #60]	; (8003108 <TIM4_IRQHandler+0x5c>)
 80030ca:	f7fd fefd 	bl	8000ec8 <GPIO_ToggleBits>
		sTDC_counter++;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <TIM4_IRQHandler+0x60>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <TIM4_IRQHandler+0x60>)
 80030d6:	6013      	str	r3, [r2, #0]
		if (sTDC_counter == 72) {
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <TIM4_IRQHandler+0x60>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b48      	cmp	r3, #72	; 0x48
 80030de:	d107      	bne.n	80030f0 <TIM4_IRQHandler+0x44>
			GPIO_SetBits(GPIOG, GPIO_Pin_3);
 80030e0:	2108      	movs	r1, #8
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <TIM4_IRQHandler+0x5c>)
 80030e4:	f7fd feba 	bl	8000e5c <GPIO_SetBits>
			sTDC_counter = 0;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <TIM4_IRQHandler+0x60>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
		} else if (sTDC_counter == 2) {
			GPIO_ResetBits(GPIOG, GPIO_Pin_3);
		}
	}
}
 80030ee:	e007      	b.n	8003100 <TIM4_IRQHandler+0x54>
		} else if (sTDC_counter == 2) {
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <TIM4_IRQHandler+0x60>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d103      	bne.n	8003100 <TIM4_IRQHandler+0x54>
			GPIO_ResetBits(GPIOG, GPIO_Pin_3);
 80030f8:	2108      	movs	r1, #8
 80030fa:	4803      	ldr	r0, [pc, #12]	; (8003108 <TIM4_IRQHandler+0x5c>)
 80030fc:	f7fd febd 	bl	8000e7a <GPIO_ResetBits>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40000800 	.word	0x40000800
 8003108:	40021800 	.word	0x40021800
 800310c:	20000044 	.word	0x20000044

08003110 <updatePeriodSim>:

void updatePeriodSim() {
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	timerSimulation.TIM_Period = getHalfPeriod();
 8003114:	f7ff ff78 	bl	8003008 <getHalfPeriod>
 8003118:	4602      	mov	r2, r0
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <updatePeriodSim+0x34>)
 800311c:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInit(TIM4, &timerSimulation);
 800311e:	4909      	ldr	r1, [pc, #36]	; (8003144 <updatePeriodSim+0x34>)
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <updatePeriodSim+0x38>)
 8003122:	f7fe fbfd 	bl	8001920 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003126:	2101      	movs	r1, #1
 8003128:	4807      	ldr	r0, [pc, #28]	; (8003148 <updatePeriodSim+0x38>)
 800312a:	f7fe fced 	bl	8001b08 <TIM_ClearITPendingBit>
	TIM_Cmd(TIM4, ENABLE);
 800312e:	2101      	movs	r1, #1
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <updatePeriodSim+0x38>)
 8003132:	f7fe fc7b 	bl	8001a2c <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003136:	2201      	movs	r2, #1
 8003138:	2101      	movs	r1, #1
 800313a:	4803      	ldr	r0, [pc, #12]	; (8003148 <updatePeriodSim+0x38>)
 800313c:	f7fe fc96 	bl	8001a6c <TIM_ITConfig>
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200007d8 	.word	0x200007d8
 8003148:	40000800 	.word	0x40000800

0800314c <initSensorInts>:

/****** --- MODULE 3 --- ******/

TIM_TimeBaseInitTypeDef injTimer;

void initSensorInts() {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Tell system that you will use PG2 for EXTI_Line0 */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOG, EXTI_PinSource2);
 8003152:	2102      	movs	r1, #2
 8003154:	2006      	movs	r0, #6
 8003156:	f7fe fba1 	bl	800189c <SYSCFG_EXTILineConfig>

	/* PD0 is connected to EXTI_Line0 */
    EXTI_InitStruct.EXTI_Line = EXTI_Line2;
 800315a:	2304      	movs	r3, #4
 800315c:	60bb      	str	r3, [r7, #8]
    /* Enable interrupt */
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800315e:	2301      	movs	r3, #1
 8003160:	73bb      	strb	r3, [r7, #14]
    /* Interrupt mode */
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8003162:	2300      	movs	r3, #0
 8003164:	733b      	strb	r3, [r7, #12]
    /* Triggers on rising */
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003166:	2308      	movs	r3, #8
 8003168:	737b      	strb	r3, [r7, #13]
    /* Add to EXTI */
    EXTI_Init(&EXTI_InitStruct);
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fbe8 	bl	8000944 <EXTI_Init>

    /* Add IRQ vector to NVIC */
    /* PD0 is connected to EXTI_Line0, which has EXTI0_IRQn vector */
    NVIC_InitStruct.NVIC_IRQChannel = EXTI2_IRQn;
 8003174:	2308      	movs	r3, #8
 8003176:	713b      	strb	r3, [r7, #4]
    /* Set priority */
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 8003178:	2301      	movs	r3, #1
 800317a:	717b      	strb	r3, [r7, #5]
    /* Set sub priority */
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 800317c:	2300      	movs	r3, #0
 800317e:	71bb      	strb	r3, [r7, #6]
    /* Enable interrupt */
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8003180:	2301      	movs	r3, #1
 8003182:	71fb      	strb	r3, [r7, #7]
    /* Add to NVIC */
    NVIC_Init(&NVIC_InitStruct);
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f830 	bl	80001ec <NVIC_Init>


	/* Tell system that you will use PG3 for EXTI_Line1 */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOG, EXTI_PinSource3);
 800318c:	2103      	movs	r1, #3
 800318e:	2006      	movs	r0, #6
 8003190:	f7fe fb84 	bl	800189c <SYSCFG_EXTILineConfig>

	/* PD1 is connected to EXTI_Line1 */
    EXTI_InitStruct.EXTI_Line = EXTI_Line3;
 8003194:	2308      	movs	r3, #8
 8003196:	60bb      	str	r3, [r7, #8]
    /* Enable interrupt */
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8003198:	2301      	movs	r3, #1
 800319a:	73bb      	strb	r3, [r7, #14]
    /* Interrupt mode */
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800319c:	2300      	movs	r3, #0
 800319e:	733b      	strb	r3, [r7, #12]
    /* Triggers on rising */
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 80031a0:	2308      	movs	r3, #8
 80031a2:	737b      	strb	r3, [r7, #13]
    /* Add to EXTI */
    EXTI_Init(&EXTI_InitStruct);
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fbcb 	bl	8000944 <EXTI_Init>

    /* Add IRQ vector to NVIC */
    /* PD1 is connected to EXTI_Line1, which has EXTI1_IRQn vector */
    NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;
 80031ae:	2309      	movs	r3, #9
 80031b0:	713b      	strb	r3, [r7, #4]
    /* Set priority */
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	717b      	strb	r3, [r7, #5]
    /* Set sub priority */
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 80031b6:	2301      	movs	r3, #1
 80031b8:	71bb      	strb	r3, [r7, #6]
    /* Enable interrupt */
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	71fb      	strb	r3, [r7, #7]
    /* Add to NVIC */
    NVIC_Init(&NVIC_InitStruct);
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f813 	bl	80001ec <NVIC_Init>
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <EXTI2_IRQHandler>:

// IRS for the sPC interrupt
void EXTI2_IRQHandler() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line2) != RESET) {
 80031d6:	2004      	movs	r0, #4
 80031d8:	f7fd fc26 	bl	8000a28 <EXTI_GetITStatus>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d051      	beq.n	8003286 <EXTI2_IRQHandler+0xb6>
		sPC_counter_IN++;
 80031e2:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <EXTI2_IRQHandler+0xc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a29      	ldr	r2, [pc, #164]	; (8003290 <EXTI2_IRQHandler+0xc0>)
 80031ea:	6013      	str	r3, [r2, #0]
		timerCountNs = TIM_GetCounter(TIM2) * 356; // 1/90MHz * 32 (prescaler) in ns
 80031ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031f0:	f7fe fc10 	bl	8001a14 <TIM_GetCounter>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80031fa:	fb03 f302 	mul.w	r3, r3, r2
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <EXTI2_IRQHandler+0xc4>)
 8003200:	6013      	str	r3, [r2, #0]
		TIM_SetCounter(TIM2, 0);
 8003202:	2100      	movs	r1, #0
 8003204:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003208:	f7fe fbf6 	bl	80019f8 <TIM_SetCounter>
		if (sPC_counter_IN == (360 - InjectionAngle) / 10) {
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <EXTI2_IRQHandler+0xc8>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <EXTI2_IRQHandler+0xcc>)
 8003216:	fb82 1203 	smull	r1, r2, r2, r3
 800321a:	1092      	asrs	r2, r2, #2
 800321c:	17db      	asrs	r3, r3, #31
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <EXTI2_IRQHandler+0xc0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d12b      	bne.n	8003280 <EXTI2_IRQHandler+0xb0>
			uint32_t period = ((360 - InjectionAngle) % 10) * (timerCountNs / 1000 / 10);
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <EXTI2_IRQHandler+0xc8>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f5c3 72b4 	rsb	r2, r3, #360	; 0x168
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <EXTI2_IRQHandler+0xcc>)
 8003232:	fb83 1302 	smull	r1, r3, r3, r2
 8003236:	1099      	asrs	r1, r3, #2
 8003238:	17d3      	asrs	r3, r2, #31
 800323a:	1ac9      	subs	r1, r1, r3
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	1ad1      	subs	r1, r2, r3
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <EXTI2_IRQHandler+0xc4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <EXTI2_IRQHandler+0xd0>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	0b5b      	lsrs	r3, r3, #13
 8003252:	fb03 f301 	mul.w	r3, r3, r1
 8003256:	607b      	str	r3, [r7, #4]
			injTimer.TIM_Period = period;
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <EXTI2_IRQHandler+0xd4>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6053      	str	r3, [r2, #4]
			TIM_TimeBaseInit(TIM3, &injTimer);
 800325e:	4911      	ldr	r1, [pc, #68]	; (80032a4 <EXTI2_IRQHandler+0xd4>)
 8003260:	4811      	ldr	r0, [pc, #68]	; (80032a8 <EXTI2_IRQHandler+0xd8>)
 8003262:	f7fe fb5d 	bl	8001920 <TIM_TimeBaseInit>
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003266:	2101      	movs	r1, #1
 8003268:	480f      	ldr	r0, [pc, #60]	; (80032a8 <EXTI2_IRQHandler+0xd8>)
 800326a:	f7fe fc4d 	bl	8001b08 <TIM_ClearITPendingBit>
			TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800326e:	2201      	movs	r2, #1
 8003270:	2101      	movs	r1, #1
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <EXTI2_IRQHandler+0xd8>)
 8003274:	f7fe fbfa 	bl	8001a6c <TIM_ITConfig>
			TIM_Cmd(TIM3, ENABLE);
 8003278:	2101      	movs	r1, #1
 800327a:	480b      	ldr	r0, [pc, #44]	; (80032a8 <EXTI2_IRQHandler+0xd8>)
 800327c:	f7fe fbd6 	bl	8001a2c <TIM_Cmd>
		}
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line2);
 8003280:	2004      	movs	r0, #4
 8003282:	f7fd fbeb 	bl	8000a5c <EXTI_ClearITPendingBit>
    }
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000048 	.word	0x20000048
 8003294:	200007f0 	.word	0x200007f0
 8003298:	20000018 	.word	0x20000018
 800329c:	66666667 	.word	0x66666667
 80032a0:	d1b71759 	.word	0xd1b71759
 80032a4:	200007e4 	.word	0x200007e4
 80032a8:	40000400 	.word	0x40000400

080032ac <EXTI3_IRQHandler>:

// IRS for the iTDC signal
void EXTI3_IRQHandler() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line3) != RESET) {
 80032b0:	2008      	movs	r0, #8
 80032b2:	f7fd fbb9 	bl	8000a28 <EXTI_GetITStatus>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <EXTI3_IRQHandler+0x1c>
		sPC_counter_IN = 0;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <EXTI3_IRQHandler+0x20>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line3);
 80032c2:	2008      	movs	r0, #8
 80032c4:	f7fd fbca 	bl	8000a5c <EXTI_ClearITPendingBit>
    }
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000048 	.word	0x20000048

080032d0 <initSensorTimer>:

// Timer to calculate speed from sPC
void initSensorTimer() {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef timerStructure;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80032d6:	2101      	movs	r1, #1
 80032d8:	2001      	movs	r0, #1
 80032da:	f7fe f927 	bl	800152c <RCC_APB1PeriphClockCmd>

    timerStructure.TIM_Prescaler = 32 - 1;
 80032de:	231f      	movs	r3, #31
 80032e0:	80bb      	strh	r3, [r7, #4]
    timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80032e2:	2300      	movs	r3, #0
 80032e4:	80fb      	strh	r3, [r7, #6]
    timerStructure.TIM_Period = 0xFFFF;
 80032e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ea:	60bb      	str	r3, [r7, #8]
    timerStructure.TIM_ClockDivision = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &timerStructure);
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032f8:	f7fe fb12 	bl	8001920 <TIM_TimeBaseInit>

    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80032fc:	2101      	movs	r1, #1
 80032fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003302:	f7fe fc01 	bl	8001b08 <TIM_ClearITPendingBit>
    TIM_Cmd(TIM2, ENABLE);
 8003306:	2101      	movs	r1, #1
 8003308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800330c:	f7fe fb8e 	bl	8001a2c <TIM_Cmd>
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003310:	2201      	movs	r2, #1
 8003312:	2101      	movs	r1, #1
 8003314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003318:	f7fe fba8 	bl	8001a6c <TIM_ITConfig>
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <initInjTimer>:

/****** --- MODULE 4 --- ******/

void initInjTimer() {
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800332a:	2101      	movs	r1, #1
 800332c:	2002      	movs	r0, #2
 800332e:	f7fe f8fd 	bl	800152c <RCC_APB1PeriphClockCmd>

    injTimer.TIM_Prescaler = 90 - 1;
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <initInjTimer+0x58>)
 8003334:	2259      	movs	r2, #89	; 0x59
 8003336:	801a      	strh	r2, [r3, #0]
    injTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <initInjTimer+0x58>)
 800333a:	2200      	movs	r2, #0
 800333c:	805a      	strh	r2, [r3, #2]
    injTimer.TIM_Period = 0xFFFF;
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <initInjTimer+0x58>)
 8003340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003344:	605a      	str	r2, [r3, #4]
    injTimer.TIM_ClockDivision = 0;
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <initInjTimer+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	811a      	strh	r2, [r3, #8]
    TIM_TimeBaseInit(TIM3, &injTimer);
 800334c:	490b      	ldr	r1, [pc, #44]	; (800337c <initInjTimer+0x58>)
 800334e:	480c      	ldr	r0, [pc, #48]	; (8003380 <initInjTimer+0x5c>)
 8003350:	f7fe fae6 	bl	8001920 <TIM_TimeBaseInit>
    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003354:	2101      	movs	r1, #1
 8003356:	480a      	ldr	r0, [pc, #40]	; (8003380 <initInjTimer+0x5c>)
 8003358:	f7fe fbd6 	bl	8001b08 <TIM_ClearITPendingBit>

	//Enable timer interrupt
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 800335c:	231d      	movs	r3, #29
 800335e:	713b      	strb	r3, [r7, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 3; //TODO: Define priorities
 8003360:	2303      	movs	r3, #3
 8003362:	717b      	strb	r3, [r7, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	71bb      	strb	r3, [r7, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003368:	2301      	movs	r3, #1
 800336a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&nvicStructure);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4618      	mov	r0, r3
 8003370:	f7fc ff3c 	bl	80001ec <NVIC_Init>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200007e4 	.word	0x200007e4
 8003380:	40000400 	.word	0x40000400

08003384 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 800338a:	2101      	movs	r1, #1
 800338c:	4824      	ldr	r0, [pc, #144]	; (8003420 <TIM3_IRQHandler+0x9c>)
 800338e:	f7fe fb91 	bl	8001ab4 <TIM_GetITStatus>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d03f      	beq.n	8003418 <TIM3_IRQHandler+0x94>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003398:	2101      	movs	r1, #1
 800339a:	4821      	ldr	r0, [pc, #132]	; (8003420 <TIM3_IRQHandler+0x9c>)
 800339c:	f7fe fbb4 	bl	8001b08 <TIM_ClearITPendingBit>

		if (injectionON == 0) {
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <TIM3_IRQHandler+0xa0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d123      	bne.n	80033f0 <TIM3_IRQHandler+0x6c>
			GPIO_SetBits(GPIOG, GPIO_Pin_9);
 80033a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ac:	481e      	ldr	r0, [pc, #120]	; (8003428 <TIM3_IRQHandler+0xa4>)
 80033ae:	f7fd fd55 	bl	8000e5c <GPIO_SetBits>

			uint32_t period = InjectionTime;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <TIM3_IRQHandler+0xa8>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	607b      	str	r3, [r7, #4]
			injTimer.TIM_Period = period;
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <TIM3_IRQHandler+0xac>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6053      	str	r3, [r2, #4]
			TIM_TimeBaseInit(TIM3, &injTimer);
 80033be:	491c      	ldr	r1, [pc, #112]	; (8003430 <TIM3_IRQHandler+0xac>)
 80033c0:	4817      	ldr	r0, [pc, #92]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033c2:	f7fe faad 	bl	8001920 <TIM_TimeBaseInit>
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80033c6:	2101      	movs	r1, #1
 80033c8:	4815      	ldr	r0, [pc, #84]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033ca:	f7fe fb9d 	bl	8001b08 <TIM_ClearITPendingBit>
			TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80033ce:	2201      	movs	r2, #1
 80033d0:	2101      	movs	r1, #1
 80033d2:	4813      	ldr	r0, [pc, #76]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033d4:	f7fe fb4a 	bl	8001a6c <TIM_ITConfig>
			TIM_Cmd(TIM3, ENABLE);
 80033d8:	2101      	movs	r1, #1
 80033da:	4811      	ldr	r0, [pc, #68]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033dc:	f7fe fb26 	bl	8001a2c <TIM_Cmd>

			TIM_SetCounter(TIM3, 0);
 80033e0:	2100      	movs	r1, #0
 80033e2:	480f      	ldr	r0, [pc, #60]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033e4:	f7fe fb08 	bl	80019f8 <TIM_SetCounter>
			injectionON = 1;
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <TIM3_IRQHandler+0xa0>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
			injectionON = 0;
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		}

    }
}
 80033ee:	e013      	b.n	8003418 <TIM3_IRQHandler+0x94>
			GPIO_ResetBits(GPIOG, GPIO_Pin_9);
 80033f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <TIM3_IRQHandler+0xa4>)
 80033f6:	f7fd fd40 	bl	8000e7a <GPIO_ResetBits>
			TIM_Cmd(TIM3, DISABLE);
 80033fa:	2100      	movs	r1, #0
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <TIM3_IRQHandler+0x9c>)
 80033fe:	f7fe fb15 	bl	8001a2c <TIM_Cmd>
			TIM_SetCounter(TIM3, 0);
 8003402:	2100      	movs	r1, #0
 8003404:	4806      	ldr	r0, [pc, #24]	; (8003420 <TIM3_IRQHandler+0x9c>)
 8003406:	f7fe faf7 	bl	80019f8 <TIM_SetCounter>
			injectionON = 0;
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <TIM3_IRQHandler+0xa0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003410:	2101      	movs	r1, #1
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <TIM3_IRQHandler+0x9c>)
 8003414:	f7fe fb78 	bl	8001b08 <TIM_ClearITPendingBit>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40000400 	.word	0x40000400
 8003424:	2000004c 	.word	0x2000004c
 8003428:	40021800 	.word	0x40021800
 800342c:	2000001a 	.word	0x2000001a
 8003430:	200007e4 	.word	0x200007e4

08003434 <DMA2_Stream1_IRQHandler>:

uint32_t SensorDataCounter = 0;
int newSample = 0;
void DMA2_Stream1_IRQHandler() {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream1, DMA_IT_TCIF1)) {
 8003438:	490a      	ldr	r1, [pc, #40]	; (8003464 <DMA2_Stream1_IRQHandler+0x30>)
 800343a:	480b      	ldr	r0, [pc, #44]	; (8003468 <DMA2_Stream1_IRQHandler+0x34>)
 800343c:	f7fd f9fc 	bl	8000838 <DMA_GetITStatus>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <DMA2_Stream1_IRQHandler+0x2a>
		SensorDataCounter++;
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <DMA2_Stream1_IRQHandler+0x38>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <DMA2_Stream1_IRQHandler+0x38>)
 800344e:	6013      	str	r3, [r2, #0]
        newSample = 1;
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <DMA2_Stream1_IRQHandler+0x3c>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
	    DMA_ClearITPendingBit(DMA2_Stream1, DMA_IT_TCIF1);
 8003456:	4903      	ldr	r1, [pc, #12]	; (8003464 <DMA2_Stream1_IRQHandler+0x30>)
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <DMA2_Stream1_IRQHandler+0x34>)
 800345a:	f7fd fa45 	bl	80008e8 <DMA_ClearITPendingBit>
	}
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	10008800 	.word	0x10008800
 8003468:	40026428 	.word	0x40026428
 800346c:	20000054 	.word	0x20000054
 8003470:	20000058 	.word	0x20000058

08003474 <main>:


int main(void)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	f2ad 7d1c 	subw	sp, sp, #1820	; 0x71c
 800347a:	af00      	add	r7, sp, #0
	//Buffer storing the LCD position
	Sample samplesBuffer[300];
	for (int i = 0; i < 300; i++) {
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8003482:	e027      	b.n	80034d4 <main+0x60>
		samplesBuffer[i].sensor1 = 0;
 8003484:	f107 0108 	add.w	r1, r7, #8
 8003488:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	440b      	add	r3, r1
 8003496:	2200      	movs	r2, #0
 8003498:	801a      	strh	r2, [r3, #0]
		samplesBuffer[i].sensor2 = 0;
 800349a:	f107 0108 	add.w	r1, r7, #8
 800349e:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	440b      	add	r3, r1
 80034ac:	3302      	adds	r3, #2
 80034ae:	2200      	movs	r2, #0
 80034b0:	801a      	strh	r2, [r3, #0]
		samplesBuffer[i].sensor3 = 0;
 80034b2:	f107 0108 	add.w	r1, r7, #8
 80034b6:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	3304      	adds	r3, #4
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 300; i++) {
 80034ca:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80034ce:	3301      	adds	r3, #1
 80034d0:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80034d4:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80034d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80034dc:	dbd2      	blt.n	8003484 <main+0x10>
	}
	int sampleIndex = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710

	/* Enable clock for SYSCFG */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80034e4:	2101      	movs	r1, #1
 80034e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034ea:	f7fe f83f 	bl	800156c <RCC_APB2PeriphClockCmd>

	initPorts(); //Setup the pin configuration
 80034ee:	f7ff fcd9 	bl	8002ea4 <initPorts>

	/* ------------- */
	/* FIRST PHASE */

	/***	MODULE 1	***/
	initTimer1Ms(); // Initialize 1 ms timer
 80034f2:	f7ff fd31 	bl	8002f58 <initTimer1Ms>
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 80034f6:	2100      	movs	r1, #0
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fe fb17 	bl	8001b2c <STM_EVAL_PBInit>

	/***	MODULE 2	***/
	initTimerSim();
 80034fe:	f7ff fd9b 	bl	8003038 <initTimerSim>

	/***	MODULE 3	***/
	initSensorInts();
 8003502:	f7ff fe23 	bl	800314c <initSensorInts>
	initSensorTimer();
 8003506:	f7ff fee3 	bl	80032d0 <initSensorTimer>

	/***	MODULE 4	***/
	initInjTimer();
 800350a:	f7ff ff0b 	bl	8003324 <initInjTimer>

	/* ------------- */
	/* SECOND PHASE */

	initTimerADC();
 800350e:	f000 f8fd 	bl	800370c <initTimerADC>
	samplesConfig();
 8003512:	f000 f84b 	bl	80035ac <samplesConfig>
	samplesCopyConfig();
 8003516:	f000 f965 	bl	80037e4 <samplesCopyConfig>

	/* ------------- */
	/* THIRD PHASE */

	initLCD();
 800351a:	f7ff fbbd 	bl	8002c98 <initLCD>

	while (1)
	{
		if (USR_Flag && STM_EVAL_PBGetState(BUTTON_USER) != Bit_SET) {
 800351e:	4b1f      	ldr	r3, [pc, #124]	; (800359c <main+0x128>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <main+0xcc>
 8003526:	2000      	movs	r0, #0
 8003528:	f7fe fb4c 	bl	8001bc4 <STM_EVAL_PBGetState>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d006      	beq.n	8003540 <main+0xcc>
			updateEngineSpeed();
 8003532:	f7ff fce5 	bl	8002f00 <updateEngineSpeed>
			updatePeriodSim();
 8003536:	f7ff fdeb 	bl	8003110 <updatePeriodSim>
			USR_Flag = 0;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <main+0x128>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
		}
		if (newSample) {
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <main+0x12c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ea      	beq.n	800351e <main+0xaa>
			newSample = 0;
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <main+0x12c>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
			samplesBuffer[sampleIndex++] = getMeanPos();
 800354e:	f8d7 2710 	ldr.w	r2, [r7, #1808]	; 0x710
 8003552:	1c53      	adds	r3, r2, #1
 8003554:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 8003558:	f107 0108 	add.w	r1, r7, #8
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	18cc      	adds	r4, r1, r3
 8003566:	463b      	mov	r3, r7
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f989 	bl	8003880 <getMeanPos>
 800356e:	463a      	mov	r2, r7
 8003570:	4623      	mov	r3, r4
 8003572:	6811      	ldr	r1, [r2, #0]
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	8892      	ldrh	r2, [r2, #4]
 8003578:	809a      	strh	r2, [r3, #4]
			if (sampleIndex == 300) sampleIndex = 0;
 800357a:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 800357e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003582:	d102      	bne.n	800358a <main+0x116>
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
			//GPIO_SetBits(GPIOE, GPIO_Pin_4);
			displaySamples(samplesBuffer, sampleIndex);	
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fbb2 	bl	8002cfc <displaySamples>
		if (USR_Flag && STM_EVAL_PBGetState(BUTTON_USER) != Bit_SET) {
 8003598:	e7c1      	b.n	800351e <main+0xaa>
 800359a:	bf00      	nop
 800359c:	20000040 	.word	0x20000040
 80035a0:	20000058 	.word	0x20000058

080035a4 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <sEE_TIMEOUT_UserCallback+0x4>
	...

080035ac <samplesConfig>:
#include "samples.h"

void samplesConfig() {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b09c      	sub	sp, #112	; 0x70
 80035b0:	af00      	add	r7, sp, #0
    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    DMA_InitTypeDef       DMA_InitStructure;
    GPIO_InitTypeDef      GPIO_InitStructure;

    /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC, ENABLE);
 80035b2:	2101      	movs	r1, #1
 80035b4:	484e      	ldr	r0, [pc, #312]	; (80036f0 <samplesConfig+0x144>)
 80035b6:	f7fd ff79 	bl	80014ac <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 80035ba:	2101      	movs	r1, #1
 80035bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035c0:	f7fd ffd4 	bl	800156c <RCC_APB2PeriphClockCmd>

    /* DMA2 Stream0 channel2 configuration **************************************/
    DMA_InitStructure.DMA_Channel = DMA_Channel_2;  
 80035c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035c8:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC3_DR_ADDRESS;
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <samplesConfig+0x148>)
 80035cc:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&samples;
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <samplesConfig+0x14c>)
 80035d0:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_BufferSize = 24; // Number of 16 bit transfers, one for each sample
 80035d6:	2318      	movs	r3, #24
 80035d8:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80035de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80035e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80035ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80035f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80035f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 80035fc:	2300      	movs	r3, #0
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8003600:	2301      	movs	r3, #1
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003604:	2300      	movs	r3, #0
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003608:	2300      	movs	r3, #0
 800360a:	647b      	str	r3, [r7, #68]	; 0x44
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	4619      	mov	r1, r3
 8003612:	483a      	ldr	r0, [pc, #232]	; (80036fc <samplesConfig+0x150>)
 8003614:	f7fc fff8 	bl	8000608 <DMA_Init>
    DMA_Cmd(DMA2_Stream0, ENABLE);
 8003618:	2101      	movs	r1, #1
 800361a:	4838      	ldr	r0, [pc, #224]	; (80036fc <samplesConfig+0x150>)
 800361c:	f7fd f84c 	bl	80006b8 <DMA_Cmd>

    /* Configure ADC3 Channel5 pin as analog input ******************************/
    /* PC3 - Sensor 1 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8003620:	2308      	movs	r3, #8
 8003622:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003624:	2303      	movs	r3, #3
 8003626:	723b      	strb	r3, [r7, #8]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8003628:	2300      	movs	r3, #0
 800362a:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4833      	ldr	r0, [pc, #204]	; (8003700 <samplesConfig+0x154>)
 8003632:	f7fd fb6b 	bl	8000d0c <GPIO_Init>

    /* Configure ADC3 Channel1 pin as analog input ******************************/
    /* PA1 - Sensor 2 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8003636:	2302      	movs	r3, #2
 8003638:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800363a:	2303      	movs	r3, #3
 800363c:	723b      	strb	r3, [r7, #8]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800363e:	2300      	movs	r3, #0
 8003640:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	4619      	mov	r1, r3
 8003646:	482f      	ldr	r0, [pc, #188]	; (8003704 <samplesConfig+0x158>)
 8003648:	f7fd fb60 	bl	8000d0c <GPIO_Init>

    /* Configure ADC3 Channel2 pin as analog input ******************************/
    /* PA2 - Sensor 3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800364c:	2304      	movs	r3, #4
 800364e:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003650:	2303      	movs	r3, #3
 8003652:	723b      	strb	r3, [r7, #8]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8003654:	2300      	movs	r3, #0
 8003656:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4829      	ldr	r0, [pc, #164]	; (8003704 <samplesConfig+0x158>)
 800365e:	f7fd fb55 	bl	8000d0c <GPIO_Init>

    /* ADC Common Init **********************************************************/
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8003662:	2300      	movs	r3, #0
 8003664:	64bb      	str	r3, [r7, #72]	; 0x48
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8003666:	2300      	movs	r3, #0
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800366a:	2300      	movs	r3, #0
 800366c:	653b      	str	r3, [r7, #80]	; 0x50
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800366e:	2300      	movs	r3, #0
 8003670:	657b      	str	r3, [r7, #84]	; 0x54
    ADC_CommonInit(&ADC_CommonInitStructure);
 8003672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fe70 	bl	800035c <ADC_CommonInit>

    /* ADC3 Init ****************************************************************/
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800367c:	2300      	movs	r3, #0
 800367e:	65bb      	str	r3, [r7, #88]	; 0x58
    ADC_InitStructure.ADC_ScanConvMode = ENABLE; // Scan multiple channels
 8003680:	2301      	movs	r3, #1
 8003682:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; // Do not start next conversion after
 8003686:	2300      	movs	r3, #0
 8003688:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800368c:	2300      	movs	r3, #0
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;	
 8003690:	2300      	movs	r3, #0
 8003692:	667b      	str	r3, [r7, #100]	; 0x64
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8003694:	2300      	movs	r3, #0
 8003696:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_InitStructure.ADC_NbrOfConversion = 3;
 8003698:	2303      	movs	r3, #3
 800369a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    ADC_Init(ADC3, &ADC_InitStructure);
 800369e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036a2:	4619      	mov	r1, r3
 80036a4:	4818      	ldr	r0, [pc, #96]	; (8003708 <samplesConfig+0x15c>)
 80036a6:	f7fc fe03 	bl	80002b0 <ADC_Init>

    /* ADC3 regular channel13 configuration *************************************/
    ADC_RegularChannelConfig(ADC3, ADC_Channel_13, 1, ADC_SampleTime_3Cycles);
 80036aa:	2300      	movs	r3, #0
 80036ac:	2201      	movs	r2, #1
 80036ae:	210d      	movs	r1, #13
 80036b0:	4815      	ldr	r0, [pc, #84]	; (8003708 <samplesConfig+0x15c>)
 80036b2:	f7fc fe97 	bl	80003e4 <ADC_RegularChannelConfig>

    /* ADC3 regular channel1 configuration *************************************/
    ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 2, ADC_SampleTime_3Cycles);
 80036b6:	2300      	movs	r3, #0
 80036b8:	2202      	movs	r2, #2
 80036ba:	2101      	movs	r1, #1
 80036bc:	4812      	ldr	r0, [pc, #72]	; (8003708 <samplesConfig+0x15c>)
 80036be:	f7fc fe91 	bl	80003e4 <ADC_RegularChannelConfig>

    /* ADC3 regular channel2 configuration *************************************/
    ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 3, ADC_SampleTime_3Cycles);
 80036c2:	2300      	movs	r3, #0
 80036c4:	2203      	movs	r2, #3
 80036c6:	2102      	movs	r1, #2
 80036c8:	480f      	ldr	r0, [pc, #60]	; (8003708 <samplesConfig+0x15c>)
 80036ca:	f7fc fe8b 	bl	80003e4 <ADC_RegularChannelConfig>

    /* Enable DMA request after last transfer (Single-ADC mode) */
    ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);
 80036ce:	2101      	movs	r1, #1
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <samplesConfig+0x15c>)
 80036d2:	f7fc ff7d 	bl	80005d0 <ADC_DMARequestAfterLastTransferCmd>

    /* Enable ADC3 DMA */
    ADC_DMACmd(ADC3, ENABLE);
 80036d6:	2101      	movs	r1, #1
 80036d8:	480b      	ldr	r0, [pc, #44]	; (8003708 <samplesConfig+0x15c>)
 80036da:	f7fc ff5d 	bl	8000598 <ADC_DMACmd>

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
 80036de:	2101      	movs	r1, #1
 80036e0:	4809      	ldr	r0, [pc, #36]	; (8003708 <samplesConfig+0x15c>)
 80036e2:	f7fc fe63 	bl	80003ac <ADC_Cmd>
}
 80036e6:	bf00      	nop
 80036e8:	3770      	adds	r7, #112	; 0x70
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	00400004 	.word	0x00400004
 80036f4:	4001224c 	.word	0x4001224c
 80036f8:	20000778 	.word	0x20000778
 80036fc:	40026410 	.word	0x40026410
 8003700:	40020800 	.word	0x40020800
 8003704:	40020000 	.word	0x40020000
 8003708:	40012200 	.word	0x40012200

0800370c <initTimerADC>:

void initTimerADC() {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef timerStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003712:	2101      	movs	r1, #1
 8003714:	2008      	movs	r0, #8
 8003716:	f7fd ff09 	bl	800152c <RCC_APB1PeriphClockCmd>

    timerStructure.TIM_Prescaler = 10 - 1; 
 800371a:	2309      	movs	r3, #9
 800371c:	80bb      	strh	r3, [r7, #4]
    timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800371e:	2300      	movs	r3, #0
 8003720:	80fb      	strh	r3, [r7, #6]
    timerStructure.TIM_Period = (uint32_t) 1125 - 1; 
 8003722:	f240 4364 	movw	r3, #1124	; 0x464
 8003726:	60bb      	str	r3, [r7, #8]
    timerStructure.TIM_ClockDivision = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM5, &timerStructure);
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	4619      	mov	r1, r3
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <initTimerADC+0x5c>)
 8003732:	f7fe f8f5 	bl	8001920 <TIM_TimeBaseInit>

    TIM_Cmd(TIM5, ENABLE);
 8003736:	2101      	movs	r1, #1
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <initTimerADC+0x5c>)
 800373a:	f7fe f977 	bl	8001a2c <TIM_Cmd>
    TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 800373e:	2201      	movs	r2, #1
 8003740:	2101      	movs	r1, #1
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <initTimerADC+0x5c>)
 8003744:	f7fe f992 	bl	8001a6c <TIM_ITConfig>

    NVIC_InitTypeDef nvicStructure;

    nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8003748:	2332      	movs	r3, #50	; 0x32
 800374a:	703b      	strb	r3, [r7, #0]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 1; // TODO: Define priorities
 800374c:	2301      	movs	r3, #1
 800374e:	707b      	strb	r3, [r7, #1]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	70bb      	strb	r3, [r7, #2]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003754:	2301      	movs	r3, #1
 8003756:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&nvicStructure);
 8003758:	463b      	mov	r3, r7
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fd46 	bl	80001ec <NVIC_Init>
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40000c00 	.word	0x40000c00

0800376c <TIM5_IRQHandler>:

void TIM5_IRQHandler() {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
    static int sample_counter = 0;
    static int send = 0;
    if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET) {
 8003770:	2101      	movs	r1, #1
 8003772:	4816      	ldr	r0, [pc, #88]	; (80037cc <TIM5_IRQHandler+0x60>)
 8003774:	f7fe f99e 	bl	8001ab4 <TIM_GetITStatus>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d024      	beq.n	80037c8 <TIM5_IRQHandler+0x5c>
        
        ADC_SoftwareStartConv(ADC3);
 800377e:	4814      	ldr	r0, [pc, #80]	; (80037d0 <TIM5_IRQHandler+0x64>)
 8003780:	f7fc fefa 	bl	8000578 <ADC_SoftwareStartConv>
        if (send) {
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <TIM5_IRQHandler+0x68>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <TIM5_IRQHandler+0x36>
        	DMA_ClearFlag(DMA2_Stream1, DMA_FLAG_HTIF1|DMA_FLAG_TCIF1|DMA_FLAG_TEIF1|DMA_FLAG_FEIF1|DMA_FLAG_DMEIF1);
 800378c:	4912      	ldr	r1, [pc, #72]	; (80037d8 <TIM5_IRQHandler+0x6c>)
 800378e:	4813      	ldr	r0, [pc, #76]	; (80037dc <TIM5_IRQHandler+0x70>)
 8003790:	f7fc ffea 	bl	8000768 <DMA_ClearFlag>
        	DMA_Cmd(DMA2_Stream1, ENABLE);
 8003794:	2101      	movs	r1, #1
 8003796:	4811      	ldr	r0, [pc, #68]	; (80037dc <TIM5_IRQHandler+0x70>)
 8003798:	f7fc ff8e 	bl	80006b8 <DMA_Cmd>
        	send = 0;
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <TIM5_IRQHandler+0x68>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
        }
        if (++sample_counter >= 8) {
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <TIM5_IRQHandler+0x74>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <TIM5_IRQHandler+0x74>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <TIM5_IRQHandler+0x74>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	dd05      	ble.n	80037c0 <TIM5_IRQHandler+0x54>
            sample_counter = 0;
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <TIM5_IRQHandler+0x74>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
            send = 1;
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <TIM5_IRQHandler+0x68>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
            //ITM_Port32(31) = 1;
        }
        TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80037c0:	2101      	movs	r1, #1
 80037c2:	4802      	ldr	r0, [pc, #8]	; (80037cc <TIM5_IRQHandler+0x60>)
 80037c4:	f7fe f9a0 	bl	8001b08 <TIM_ClearITPendingBit>
    }
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40012200 	.word	0x40012200
 80037d4:	2000005c 	.word	0x2000005c
 80037d8:	10000f40 	.word	0x10000f40
 80037dc:	40026428 	.word	0x40026428
 80037e0:	20000060 	.word	0x20000060

080037e4 <samplesCopyConfig>:

void samplesCopyConfig() {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b090      	sub	sp, #64	; 0x40
 80037e8:	af00      	add	r7, sp, #0
    /* DMA2 Stream1 channel3 configuration **************************************/
    DMA_InitTypeDef DMA_MemToMem;
    DMA_MemToMem.DMA_Channel = DMA_Channel_3;
 80037ea:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80037ee:	607b      	str	r3, [r7, #4]
    DMA_MemToMem.DMA_PeripheralBaseAddr = (uint32_t)&samples;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <samplesCopyConfig+0x8c>)
 80037f2:	60bb      	str	r3, [r7, #8]
    DMA_MemToMem.DMA_Memory0BaseAddr = (uint32_t)&samplesCopy;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <samplesCopyConfig+0x90>)
 80037f6:	60fb      	str	r3, [r7, #12]
    DMA_MemToMem.DMA_DIR = DMA_DIR_MemoryToMemory;
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	613b      	str	r3, [r7, #16]
    DMA_MemToMem.DMA_BufferSize = 24; // Number of 16 bit transfers, one for each sample
 80037fc:	2318      	movs	r3, #24
 80037fe:	617b      	str	r3, [r7, #20]
    DMA_MemToMem.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8003800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003804:	61bb      	str	r3, [r7, #24]
    DMA_MemToMem.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380a:	61fb      	str	r3, [r7, #28]
    DMA_MemToMem.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800380c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003810:	623b      	str	r3, [r7, #32]
    DMA_MemToMem.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_MemToMem.DMA_Mode = DMA_Mode_Normal;
 8003818:	2300      	movs	r3, #0
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_MemToMem.DMA_Priority = DMA_Priority_VeryHigh;
 800381c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_MemToMem.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003822:	2304      	movs	r3, #4
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_MemToMem.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_MemToMem.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800382a:	2300      	movs	r3, #0
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
    DMA_MemToMem.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800382e:	2300      	movs	r3, #0
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
    DMA_Init(DMA2_Stream1, &DMA_MemToMem);
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4810      	ldr	r0, [pc, #64]	; (8003878 <samplesCopyConfig+0x94>)
 8003838:	f7fc fee6 	bl	8000608 <DMA_Init>

    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream1_IRQn;
 800383c:	2339      	movs	r3, #57	; 0x39
 800383e:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8003844:	2302      	movs	r3, #2
 8003846:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003848:	2301      	movs	r3, #1
 800384a:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 800384c:	463b      	mov	r3, r7
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fccc 	bl	80001ec <NVIC_Init>

    DMA_ClearFlag(DMA2_Stream1, DMA_FLAG_HTIF1|DMA_FLAG_TCIF1|DMA_FLAG_TEIF1|DMA_FLAG_FEIF1|DMA_FLAG_DMEIF1);
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <samplesCopyConfig+0x98>)
 8003856:	4808      	ldr	r0, [pc, #32]	; (8003878 <samplesCopyConfig+0x94>)
 8003858:	f7fc ff86 	bl	8000768 <DMA_ClearFlag>
    DMA_ITConfig(DMA2_Stream1, DMA_IT_TC, ENABLE);
 800385c:	2201      	movs	r2, #1
 800385e:	2110      	movs	r1, #16
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <samplesCopyConfig+0x94>)
 8003862:	f7fc ffaf 	bl	80007c4 <DMA_ITConfig>
}
 8003866:	bf00      	nop
 8003868:	3740      	adds	r7, #64	; 0x40
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000778 	.word	0x20000778
 8003874:	200007a8 	.word	0x200007a8
 8003878:	40026428 	.word	0x40026428
 800387c:	10000f40 	.word	0x10000f40

08003880 <getMeanPos>:

Sample getMeanPos() {
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    Sample result = {0,0,0};
 8003888:	2300      	movs	r3, #0
 800388a:	81bb      	strh	r3, [r7, #12]
 800388c:	2300      	movs	r3, #0
 800388e:	81fb      	strh	r3, [r7, #14]
 8003890:	2300      	movs	r3, #0
 8003892:	823b      	strh	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e028      	b.n	80038ec <getMeanPos+0x6c>
        result.sensor1 += samplesCopy[i].sensor1;
 800389a:	89b9      	ldrh	r1, [r7, #12]
 800389c:	4834      	ldr	r0, [pc, #208]	; (8003970 <getMeanPos+0xf0>)
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4403      	add	r3, r0
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	440b      	add	r3, r1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	81bb      	strh	r3, [r7, #12]
        result.sensor2 += samplesCopy[i].sensor2;
 80038b2:	89f9      	ldrh	r1, [r7, #14]
 80038b4:	482e      	ldr	r0, [pc, #184]	; (8003970 <getMeanPos+0xf0>)
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4403      	add	r3, r0
 80038c2:	3302      	adds	r3, #2
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	440b      	add	r3, r1
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	81fb      	strh	r3, [r7, #14]
        result.sensor3 += samplesCopy[i].sensor3;
 80038cc:	8a39      	ldrh	r1, [r7, #16]
 80038ce:	4828      	ldr	r0, [pc, #160]	; (8003970 <getMeanPos+0xf0>)
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4613      	mov	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4403      	add	r3, r0
 80038dc:	3304      	adds	r3, #4
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	440b      	add	r3, r1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	823b      	strh	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3301      	adds	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	ddd3      	ble.n	800389a <getMeanPos+0x1a>
    }
    result.sensor1 = result.sensor1 *220/8/4095+10;
 80038f2:	89bb      	ldrh	r3, [r7, #12]
 80038f4:	461a      	mov	r2, r3
 80038f6:	23dc      	movs	r3, #220	; 0xdc
 80038f8:	fb03 f302 	mul.w	r3, r3, r2
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <getMeanPos+0xf4>)
 80038fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003902:	441a      	add	r2, r3
 8003904:	1392      	asrs	r2, r2, #14
 8003906:	17db      	asrs	r3, r3, #31
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	330a      	adds	r3, #10
 800390e:	b29b      	uxth	r3, r3
 8003910:	81bb      	strh	r3, [r7, #12]
    result.sensor2 = result.sensor2 *220/8/4095+10;
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	461a      	mov	r2, r3
 8003916:	23dc      	movs	r3, #220	; 0xdc
 8003918:	fb03 f302 	mul.w	r3, r3, r2
 800391c:	4a15      	ldr	r2, [pc, #84]	; (8003974 <getMeanPos+0xf4>)
 800391e:	fb82 1203 	smull	r1, r2, r2, r3
 8003922:	441a      	add	r2, r3
 8003924:	1392      	asrs	r2, r2, #14
 8003926:	17db      	asrs	r3, r3, #31
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	b29b      	uxth	r3, r3
 800392c:	330a      	adds	r3, #10
 800392e:	b29b      	uxth	r3, r3
 8003930:	81fb      	strh	r3, [r7, #14]
    result.sensor3 = result.sensor3 *220/8/4095+10;
 8003932:	8a3b      	ldrh	r3, [r7, #16]
 8003934:	461a      	mov	r2, r3
 8003936:	23dc      	movs	r3, #220	; 0xdc
 8003938:	fb03 f302 	mul.w	r3, r3, r2
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <getMeanPos+0xf4>)
 800393e:	fb82 1203 	smull	r1, r2, r2, r3
 8003942:	441a      	add	r2, r3
 8003944:	1392      	asrs	r2, r2, #14
 8003946:	17db      	asrs	r3, r3, #31
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	330a      	adds	r3, #10
 800394e:	b29b      	uxth	r3, r3
 8003950:	823b      	strh	r3, [r7, #16]

    return result;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	461a      	mov	r2, r3
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	6010      	str	r0, [r2, #0]
 800395e:	889b      	ldrh	r3, [r3, #4]
 8003960:	8093      	strh	r3, [r2, #4]
}
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200007a8 	.word	0x200007a8
 8003974:	80080081 	.word	0x80080081

08003978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b0 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800397c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800397e:	e003      	b.n	8003988 <LoopCopyDataInit>

08003980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003986:	3104      	adds	r1, #4

08003988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800398c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800398e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003990:	d3f6      	bcc.n	8003980 <CopyDataInit>
  ldr  r2, =_sbss
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003994:	e002      	b.n	800399c <LoopFillZerobss>

08003996 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003996:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003998:	f842 3b04 	str.w	r3, [r2], #4

0800399c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800399e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039a0:	d3f9      	bcc.n	8003996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039a2:	f000 f841 	bl	8003a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039a6:	f000 f8f1 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039aa:	f7ff fd63 	bl	8003474 <main>
  bx  lr    
 80039ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80039b4:	08004dc4 	.word	0x08004dc4
  ldr  r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039bc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80039c0:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80039c4:	200007f4 	.word	0x200007f4

080039c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c8:	e7fe      	b.n	80039c8 <ADC_IRQHandler>

080039ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <HardFault_Handler+0x4>

080039de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80039e2:	e7fe      	b.n	80039e2 <MemManage_Handler+0x4>

080039e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <BusFault_Handler+0x4>

080039ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <UsageFault_Handler+0x4>

080039f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <SystemInit+0x60>)
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <SystemInit+0x60>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <SystemInit+0x64>)
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <SystemInit+0x64>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <SystemInit+0x64>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a4e:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <SystemInit+0x64>)
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <SystemInit+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <SystemInit+0x64>)
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <SystemInit+0x68>)
 8003a62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <SystemInit+0x64>)
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <SystemInit+0x64>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <SystemInit+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003a76:	f000 f80d 	bl	8003a94 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a7a:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <SystemInit+0x60>)
 8003a7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a80:	609a      	str	r2, [r3, #8]
#endif
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	e000ed00 	.word	0xe000ed00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	24003010 	.word	0x24003010

08003a94 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003aa2:	4a36      	ldr	r2, [pc, #216]	; (8003b7c <SetSysClock+0xe8>)
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <SetSysClock+0xe8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <SetSysClock+0xe8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3301      	adds	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <SetSysClock+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003aca:	d1f0      	bne.n	8003aae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <SetSysClock+0xe8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	e001      	b.n	8003ae2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <SetSysClock+0xe8>)
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <SetSysClock+0xec>)
 8003aec:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <SetSysClock+0xe8>)
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <SetSysClock+0xe8>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <SetSysClock+0xf0>)
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <SetSysClock+0xf0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b04:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003b06:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <SetSysClock+0xe8>)
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <SetSysClock+0xe8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <SetSysClock+0xe8>)
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <SetSysClock+0xe8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b18:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <SetSysClock+0xe8>)
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <SetSysClock+0xe8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003b24:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <SetSysClock+0xe8>)
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <SetSysClock+0xe8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b30:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003b32:	bf00      	nop
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <SetSysClock+0xe8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f9      	beq.n	8003b34 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <SetSysClock+0xf4>)
 8003b42:	f240 7205 	movw	r2, #1797	; 0x705
 8003b46:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <SetSysClock+0xe8>)
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <SetSysClock+0xe8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <SetSysClock+0xe8>)
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <SetSysClock+0xe8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003b60:	bf00      	nop
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <SetSysClock+0xe8>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d1f9      	bne.n	8003b62 <SetSysClock+0xce>
    {
    }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	07405a08 	.word	0x07405a08
 8003b84:	40007000 	.word	0x40007000
 8003b88:	40023c00 	.word	0x40023c00

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4e0d      	ldr	r6, [pc, #52]	; (8003bc4 <__libc_init_array+0x38>)
 8003b90:	4c0d      	ldr	r4, [pc, #52]	; (8003bc8 <__libc_init_array+0x3c>)
 8003b92:	1ba4      	subs	r4, r4, r6
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	2500      	movs	r5, #0
 8003b98:	42a5      	cmp	r5, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	4e0b      	ldr	r6, [pc, #44]	; (8003bcc <__libc_init_array+0x40>)
 8003b9e:	4c0c      	ldr	r4, [pc, #48]	; (8003bd0 <__libc_init_array+0x44>)
 8003ba0:	f000 f818 	bl	8003bd4 <_init>
 8003ba4:	1ba4      	subs	r4, r4, r6
 8003ba6:	10a4      	asrs	r4, r4, #2
 8003ba8:	2500      	movs	r5, #0
 8003baa:	42a5      	cmp	r5, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb4:	4798      	blx	r3
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bbe:	4798      	blx	r3
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08004dbc 	.word	0x08004dbc
 8003bc8:	08004dbc 	.word	0x08004dbc
 8003bcc:	08004dbc 	.word	0x08004dbc
 8003bd0:	08004dc0 	.word	0x08004dc0

08003bd4 <_init>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr

08003be0 <_fini>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr
